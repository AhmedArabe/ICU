
ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000285e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000285e  000028f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800080  00800080  00002912  2**0
                  ALLOC
  3 .stab         0000240c  00000000  00000000  00002914  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001624  00000000  00000000  00004d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000065f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000823d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009128  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a2c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aa93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__vector_6>
      1c:	0c 94 bd 12 	jmp	0x257a	; 0x257a <__vector_7>
      20:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__vector_8>
      24:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__vector_9>
      28:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__vector_10>
      2c:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 95 13 	call	0x272a	; 0x272a <main>
      8a:	0c 94 2d 14 	jmp	0x285a	; 0x285a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_u8SetPinDirection>:
#include  "DIO_config.h"
#include "DIO_private.h"
#include "DIO_register.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	6b 83       	std	Y+3, r22	; 0x03
     b5e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8Error_Sate =0;
     b60:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <=DIO_u8_PIN7)
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <DIO_u8SetPinDirection+0x24>
     b68:	f4 c0       	rjmp	.+488    	; 0xd52 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction ==DIO_u8_PIN_OUTPUT)
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	09 f0       	breq	.+2      	; 0xb72 <DIO_u8SetPinDirection+0x2c>
     b70:	72 c0       	rjmp	.+228    	; 0xc56 <DIO_u8SetPinDirection+0x110>
		{
			switch (Copy_u8Port)
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	38 87       	std	Y+8, r19	; 0x08
     b7a:	2f 83       	std	Y+7, r18	; 0x07
     b7c:	8f 81       	ldd	r24, Y+7	; 0x07
     b7e:	98 85       	ldd	r25, Y+8	; 0x08
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	91 05       	cpc	r25, r1
     b84:	49 f1       	breq	.+82     	; 0xbd8 <DIO_u8SetPinDirection+0x92>
     b86:	2f 81       	ldd	r18, Y+7	; 0x07
     b88:	38 85       	ldd	r19, Y+8	; 0x08
     b8a:	22 30       	cpi	r18, 0x02	; 2
     b8c:	31 05       	cpc	r19, r1
     b8e:	2c f4       	brge	.+10     	; 0xb9a <DIO_u8SetPinDirection+0x54>
     b90:	8f 81       	ldd	r24, Y+7	; 0x07
     b92:	98 85       	ldd	r25, Y+8	; 0x08
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	61 f0       	breq	.+24     	; 0xbb0 <DIO_u8SetPinDirection+0x6a>
     b98:	5b c0       	rjmp	.+182    	; 0xc50 <DIO_u8SetPinDirection+0x10a>
     b9a:	2f 81       	ldd	r18, Y+7	; 0x07
     b9c:	38 85       	ldd	r19, Y+8	; 0x08
     b9e:	22 30       	cpi	r18, 0x02	; 2
     ba0:	31 05       	cpc	r19, r1
     ba2:	71 f1       	breq	.+92     	; 0xc00 <DIO_u8SetPinDirection+0xba>
     ba4:	8f 81       	ldd	r24, Y+7	; 0x07
     ba6:	98 85       	ldd	r25, Y+8	; 0x08
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	91 05       	cpc	r25, r1
     bac:	e9 f1       	breq	.+122    	; 0xc28 <DIO_u8SetPinDirection+0xe2>
     bae:	50 c0       	rjmp	.+160    	; 0xc50 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8_PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
     bb0:	aa e3       	ldi	r26, 0x3A	; 58
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e3       	ldi	r30, 0x3A	; 58
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	48 2f       	mov	r20, r24
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	02 2e       	mov	r0, r18
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <DIO_u8SetPinDirection+0x88>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	0a 94       	dec	r0
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <DIO_u8SetPinDirection+0x84>
     bd2:	84 2b       	or	r24, r20
     bd4:	8c 93       	st	X, r24
     bd6:	bf c0       	rjmp	.+382    	; 0xd56 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
     bd8:	a7 e3       	ldi	r26, 0x37	; 55
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e7 e3       	ldi	r30, 0x37	; 55
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	48 2f       	mov	r20, r24
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	02 2e       	mov	r0, r18
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <DIO_u8SetPinDirection+0xb0>
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	0a 94       	dec	r0
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <DIO_u8SetPinDirection+0xac>
     bfa:	84 2b       	or	r24, r20
     bfc:	8c 93       	st	X, r24
     bfe:	ab c0       	rjmp	.+342    	; 0xd56 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
     c00:	a4 e3       	ldi	r26, 0x34	; 52
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e4 e3       	ldi	r30, 0x34	; 52
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	48 2f       	mov	r20, r24
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	02 2e       	mov	r0, r18
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <DIO_u8SetPinDirection+0xd8>
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	0a 94       	dec	r0
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <DIO_u8SetPinDirection+0xd4>
     c22:	84 2b       	or	r24, r20
     c24:	8c 93       	st	X, r24
     c26:	97 c0       	rjmp	.+302    	; 0xd56 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
     c28:	a1 e3       	ldi	r26, 0x31	; 49
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e1 e3       	ldi	r30, 0x31	; 49
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	48 2f       	mov	r20, r24
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	02 2e       	mov	r0, r18
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <DIO_u8SetPinDirection+0x100>
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	0a 94       	dec	r0
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <DIO_u8SetPinDirection+0xfc>
     c4a:	84 2b       	or	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	83 c0       	rjmp	.+262    	; 0xd56 <DIO_u8SetPinDirection+0x210>
			default :Local_u8Error_Sate=1 ;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	80 c0       	rjmp	.+256    	; 0xd56 <DIO_u8SetPinDirection+0x210>

			}
		}
		else if(Copy_u8Direction ==DIO_u8_PIN_INPUT)
     c56:	8c 81       	ldd	r24, Y+4	; 0x04
     c58:	88 23       	and	r24, r24
     c5a:	09 f0       	breq	.+2      	; 0xc5e <DIO_u8SetPinDirection+0x118>
     c5c:	77 c0       	rjmp	.+238    	; 0xd4c <DIO_u8SetPinDirection+0x206>
		{
			switch (Copy_u8Port)
     c5e:	8a 81       	ldd	r24, Y+2	; 0x02
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	3e 83       	std	Y+6, r19	; 0x06
     c66:	2d 83       	std	Y+5, r18	; 0x05
     c68:	8d 81       	ldd	r24, Y+5	; 0x05
     c6a:	9e 81       	ldd	r25, Y+6	; 0x06
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	91 05       	cpc	r25, r1
     c70:	59 f1       	breq	.+86     	; 0xcc8 <DIO_u8SetPinDirection+0x182>
     c72:	2d 81       	ldd	r18, Y+5	; 0x05
     c74:	3e 81       	ldd	r19, Y+6	; 0x06
     c76:	22 30       	cpi	r18, 0x02	; 2
     c78:	31 05       	cpc	r19, r1
     c7a:	2c f4       	brge	.+10     	; 0xc86 <DIO_u8SetPinDirection+0x140>
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	69 f0       	breq	.+26     	; 0xc9e <DIO_u8SetPinDirection+0x158>
     c84:	60 c0       	rjmp	.+192    	; 0xd46 <DIO_u8SetPinDirection+0x200>
     c86:	2d 81       	ldd	r18, Y+5	; 0x05
     c88:	3e 81       	ldd	r19, Y+6	; 0x06
     c8a:	22 30       	cpi	r18, 0x02	; 2
     c8c:	31 05       	cpc	r19, r1
     c8e:	89 f1       	breq	.+98     	; 0xcf2 <DIO_u8SetPinDirection+0x1ac>
     c90:	8d 81       	ldd	r24, Y+5	; 0x05
     c92:	9e 81       	ldd	r25, Y+6	; 0x06
     c94:	83 30       	cpi	r24, 0x03	; 3
     c96:	91 05       	cpc	r25, r1
     c98:	09 f4       	brne	.+2      	; 0xc9c <DIO_u8SetPinDirection+0x156>
     c9a:	40 c0       	rjmp	.+128    	; 0xd1c <DIO_u8SetPinDirection+0x1d6>
     c9c:	54 c0       	rjmp	.+168    	; 0xd46 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8_PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
     c9e:	aa e3       	ldi	r26, 0x3A	; 58
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	ea e3       	ldi	r30, 0x3A	; 58
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	48 2f       	mov	r20, r24
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 2e       	mov	r0, r18
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DIO_u8SetPinDirection+0x176>
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DIO_u8SetPinDirection+0x172>
     cc0:	80 95       	com	r24
     cc2:	84 23       	and	r24, r20
     cc4:	8c 93       	st	X, r24
     cc6:	47 c0       	rjmp	.+142    	; 0xd56 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
     cc8:	a7 e3       	ldi	r26, 0x37	; 55
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e7 e3       	ldi	r30, 0x37	; 55
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	48 2f       	mov	r20, r24
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 2e       	mov	r0, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <DIO_u8SetPinDirection+0x1a0>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	0a 94       	dec	r0
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <DIO_u8SetPinDirection+0x19c>
     cea:	80 95       	com	r24
     cec:	84 23       	and	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	32 c0       	rjmp	.+100    	; 0xd56 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
     cf2:	a4 e3       	ldi	r26, 0x34	; 52
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e4 e3       	ldi	r30, 0x34	; 52
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_u8SetPinDirection+0x1ca>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_u8SetPinDirection+0x1c6>
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	1d c0       	rjmp	.+58     	; 0xd56 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
     d1c:	a1 e3       	ldi	r26, 0x31	; 49
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e1 e3       	ldi	r30, 0x31	; 49
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_u8SetPinDirection+0x1f4>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_u8SetPinDirection+0x1f0>
     d3e:	80 95       	com	r24
     d40:	84 23       	and	r24, r20
     d42:	8c 93       	st	X, r24
     d44:	08 c0       	rjmp	.+16     	; 0xd56 <DIO_u8SetPinDirection+0x210>
			default :Local_u8Error_Sate=1 ;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	05 c0       	rjmp	.+10     	; 0xd56 <DIO_u8SetPinDirection+0x210>

			}
		}
		else
		{
			Local_u8Error_Sate=1 ;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8Error_Sate=1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_Sate;
     d56:	89 81       	ldd	r24, Y+1	; 0x01
}
     d58:	28 96       	adiw	r28, 0x08	; 8
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	08 95       	ret

00000d6a <DIO_u8SetPortDirection>:



u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <DIO_u8SetPortDirection+0x6>
     d70:	00 d0       	rcall	.+0      	; 0xd72 <DIO_u8SetPortDirection+0x8>
     d72:	0f 92       	push	r0
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	8a 83       	std	Y+2, r24	; 0x02
     d7a:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8_ErrorState=0;
     d7c:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	3d 83       	std	Y+5, r19	; 0x05
     d86:	2c 83       	std	Y+4, r18	; 0x04
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	9d 81       	ldd	r25, Y+5	; 0x05
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	91 05       	cpc	r25, r1
     d90:	d1 f0       	breq	.+52     	; 0xdc6 <DIO_u8SetPortDirection+0x5c>
     d92:	2c 81       	ldd	r18, Y+4	; 0x04
     d94:	3d 81       	ldd	r19, Y+5	; 0x05
     d96:	22 30       	cpi	r18, 0x02	; 2
     d98:	31 05       	cpc	r19, r1
     d9a:	2c f4       	brge	.+10     	; 0xda6 <DIO_u8SetPortDirection+0x3c>
     d9c:	8c 81       	ldd	r24, Y+4	; 0x04
     d9e:	9d 81       	ldd	r25, Y+5	; 0x05
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	61 f0       	breq	.+24     	; 0xdbc <DIO_u8SetPortDirection+0x52>
     da4:	1f c0       	rjmp	.+62     	; 0xde4 <DIO_u8SetPortDirection+0x7a>
     da6:	2c 81       	ldd	r18, Y+4	; 0x04
     da8:	3d 81       	ldd	r19, Y+5	; 0x05
     daa:	22 30       	cpi	r18, 0x02	; 2
     dac:	31 05       	cpc	r19, r1
     dae:	81 f0       	breq	.+32     	; 0xdd0 <DIO_u8SetPortDirection+0x66>
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	83 30       	cpi	r24, 0x03	; 3
     db6:	91 05       	cpc	r25, r1
     db8:	81 f0       	breq	.+32     	; 0xdda <DIO_u8SetPortDirection+0x70>
     dba:	14 c0       	rjmp	.+40     	; 0xde4 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8_PORTA : DDRA =Copy_u8Direction; break;
     dbc:	ea e3       	ldi	r30, 0x3A	; 58
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	80 83       	st	Z, r24
     dc4:	11 c0       	rjmp	.+34     	; 0xde8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTB : DDRB =Copy_u8Direction; break;
     dc6:	e7 e3       	ldi	r30, 0x37	; 55
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	80 83       	st	Z, r24
     dce:	0c c0       	rjmp	.+24     	; 0xde8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTC : DDRC =Copy_u8Direction; break;
     dd0:	e4 e3       	ldi	r30, 0x34	; 52
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	80 83       	st	Z, r24
     dd8:	07 c0       	rjmp	.+14     	; 0xde8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTD : DDRD =Copy_u8Direction; break;
     dda:	e1 e3       	ldi	r30, 0x31	; 49
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	80 83       	st	Z, r24
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_u8SetPortDirection+0x7e>
	default :Local_u8_ErrorState=1;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
     de8:	89 81       	ldd	r24, Y+1	; 0x01

}
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <DIO_u8SetPinValue>:



u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	28 97       	sbiw	r28, 0x08	; 8
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	8a 83       	std	Y+2, r24	; 0x02
     e10:	6b 83       	std	Y+3, r22	; 0x03
     e12:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_ErrorState=0;
     e14:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <=DIO_u8_PIN7)
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	88 30       	cpi	r24, 0x08	; 8
     e1a:	08 f0       	brcs	.+2      	; 0xe1e <DIO_u8SetPinValue+0x24>
     e1c:	f4 c0       	rjmp	.+488    	; 0x1006 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value ==DIO_u8_PIN_HIGH)
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	09 f0       	breq	.+2      	; 0xe26 <DIO_u8SetPinValue+0x2c>
     e24:	72 c0       	rjmp	.+228    	; 0xf0a <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	38 87       	std	Y+8, r19	; 0x08
     e2e:	2f 83       	std	Y+7, r18	; 0x07
     e30:	8f 81       	ldd	r24, Y+7	; 0x07
     e32:	98 85       	ldd	r25, Y+8	; 0x08
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	91 05       	cpc	r25, r1
     e38:	49 f1       	breq	.+82     	; 0xe8c <DIO_u8SetPinValue+0x92>
     e3a:	2f 81       	ldd	r18, Y+7	; 0x07
     e3c:	38 85       	ldd	r19, Y+8	; 0x08
     e3e:	22 30       	cpi	r18, 0x02	; 2
     e40:	31 05       	cpc	r19, r1
     e42:	2c f4       	brge	.+10     	; 0xe4e <DIO_u8SetPinValue+0x54>
     e44:	8f 81       	ldd	r24, Y+7	; 0x07
     e46:	98 85       	ldd	r25, Y+8	; 0x08
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	61 f0       	breq	.+24     	; 0xe64 <DIO_u8SetPinValue+0x6a>
     e4c:	5b c0       	rjmp	.+182    	; 0xf04 <DIO_u8SetPinValue+0x10a>
     e4e:	2f 81       	ldd	r18, Y+7	; 0x07
     e50:	38 85       	ldd	r19, Y+8	; 0x08
     e52:	22 30       	cpi	r18, 0x02	; 2
     e54:	31 05       	cpc	r19, r1
     e56:	71 f1       	breq	.+92     	; 0xeb4 <DIO_u8SetPinValue+0xba>
     e58:	8f 81       	ldd	r24, Y+7	; 0x07
     e5a:	98 85       	ldd	r25, Y+8	; 0x08
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	91 05       	cpc	r25, r1
     e60:	e9 f1       	breq	.+122    	; 0xedc <DIO_u8SetPinValue+0xe2>
     e62:	50 c0       	rjmp	.+160    	; 0xf04 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8_PORTA :SET_BIT(PORTA,Copy_u8Pin); break;
     e64:	ab e3       	ldi	r26, 0x3B	; 59
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	eb e3       	ldi	r30, 0x3B	; 59
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_u8SetPinValue+0x88>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_u8SetPinValue+0x84>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	bf c0       	rjmp	.+382    	; 0x100a <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTB :SET_BIT(PORTB,Copy_u8Pin); break;
     e8c:	a8 e3       	ldi	r26, 0x38	; 56
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e8 e3       	ldi	r30, 0x38	; 56
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_u8SetPinValue+0xb0>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_u8SetPinValue+0xac>
     eae:	84 2b       	or	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	ab c0       	rjmp	.+342    	; 0x100a <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTC :SET_BIT(PORTC,Copy_u8Pin); break;
     eb4:	a5 e3       	ldi	r26, 0x35	; 53
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e5 e3       	ldi	r30, 0x35	; 53
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_u8SetPinValue+0xd8>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_u8SetPinValue+0xd4>
     ed6:	84 2b       	or	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	97 c0       	rjmp	.+302    	; 0x100a <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTD :SET_BIT(PORTD,Copy_u8Pin); break;
     edc:	a2 e3       	ldi	r26, 0x32	; 50
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e2 e3       	ldi	r30, 0x32	; 50
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_u8SetPinValue+0x100>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_u8SetPinValue+0xfc>
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	83 c0       	rjmp	.+262    	; 0x100a <DIO_u8SetPinValue+0x210>
			default :Local_u8_ErrorState =1 ;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	80 c0       	rjmp	.+256    	; 0x100a <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value ==DIO_u8_PIN_LOW)
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	88 23       	and	r24, r24
     f0e:	09 f0       	breq	.+2      	; 0xf12 <DIO_u8SetPinValue+0x118>
     f10:	77 c0       	rjmp	.+238    	; 0x1000 <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	3e 83       	std	Y+6, r19	; 0x06
     f1a:	2d 83       	std	Y+5, r18	; 0x05
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	91 05       	cpc	r25, r1
     f24:	59 f1       	breq	.+86     	; 0xf7c <DIO_u8SetPinValue+0x182>
     f26:	2d 81       	ldd	r18, Y+5	; 0x05
     f28:	3e 81       	ldd	r19, Y+6	; 0x06
     f2a:	22 30       	cpi	r18, 0x02	; 2
     f2c:	31 05       	cpc	r19, r1
     f2e:	2c f4       	brge	.+10     	; 0xf3a <DIO_u8SetPinValue+0x140>
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	69 f0       	breq	.+26     	; 0xf52 <DIO_u8SetPinValue+0x158>
     f38:	60 c0       	rjmp	.+192    	; 0xffa <DIO_u8SetPinValue+0x200>
     f3a:	2d 81       	ldd	r18, Y+5	; 0x05
     f3c:	3e 81       	ldd	r19, Y+6	; 0x06
     f3e:	22 30       	cpi	r18, 0x02	; 2
     f40:	31 05       	cpc	r19, r1
     f42:	89 f1       	breq	.+98     	; 0xfa6 <DIO_u8SetPinValue+0x1ac>
     f44:	8d 81       	ldd	r24, Y+5	; 0x05
     f46:	9e 81       	ldd	r25, Y+6	; 0x06
     f48:	83 30       	cpi	r24, 0x03	; 3
     f4a:	91 05       	cpc	r25, r1
     f4c:	09 f4       	brne	.+2      	; 0xf50 <DIO_u8SetPinValue+0x156>
     f4e:	40 c0       	rjmp	.+128    	; 0xfd0 <DIO_u8SetPinValue+0x1d6>
     f50:	54 c0       	rjmp	.+168    	; 0xffa <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8_PORTA :CLR_BIT(PORTA,Copy_u8Pin); break;
     f52:	ab e3       	ldi	r26, 0x3B	; 59
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	eb e3       	ldi	r30, 0x3B	; 59
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_u8SetPinValue+0x176>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_u8SetPinValue+0x172>
     f74:	80 95       	com	r24
     f76:	84 23       	and	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	47 c0       	rjmp	.+142    	; 0x100a <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTB :CLR_BIT(PORTB,Copy_u8Pin); break;
     f7c:	a8 e3       	ldi	r26, 0x38	; 56
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e8 e3       	ldi	r30, 0x38	; 56
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_u8SetPinValue+0x1a0>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_u8SetPinValue+0x19c>
     f9e:	80 95       	com	r24
     fa0:	84 23       	and	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	32 c0       	rjmp	.+100    	; 0x100a <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTC :CLR_BIT(PORTC,Copy_u8Pin); break;
     fa6:	a5 e3       	ldi	r26, 0x35	; 53
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e5 e3       	ldi	r30, 0x35	; 53
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_u8SetPinValue+0x1ca>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_u8SetPinValue+0x1c6>
     fc8:	80 95       	com	r24
     fca:	84 23       	and	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	1d c0       	rjmp	.+58     	; 0x100a <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTD :CLR_BIT(PORTD,Copy_u8Pin); break;
     fd0:	a2 e3       	ldi	r26, 0x32	; 50
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e2 e3       	ldi	r30, 0x32	; 50
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_u8SetPinValue+0x1f4>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_u8SetPinValue+0x1f0>
     ff2:	80 95       	com	r24
     ff4:	84 23       	and	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	08 c0       	rjmp	.+16     	; 0x100a <DIO_u8SetPinValue+0x210>
			default :Local_u8_ErrorState =1 ;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8_ErrorState=1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8_ErrorState=1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8_ErrorState;
    100a:	89 81       	ldd	r24, Y+1	; 0x01

}
    100c:	28 96       	adiw	r28, 0x08	; 8
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <DIO_u8SetPortValue>:




u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	00 d0       	rcall	.+0      	; 0x1024 <DIO_u8SetPortValue+0x6>
    1024:	00 d0       	rcall	.+0      	; 0x1026 <DIO_u8SetPortValue+0x8>
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	8a 83       	std	Y+2, r24	; 0x02
    102e:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8_ErrorState=0;
    1030:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	3d 83       	std	Y+5, r19	; 0x05
    103a:	2c 83       	std	Y+4, r18	; 0x04
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	9d 81       	ldd	r25, Y+5	; 0x05
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	91 05       	cpc	r25, r1
    1044:	d1 f0       	breq	.+52     	; 0x107a <DIO_u8SetPortValue+0x5c>
    1046:	2c 81       	ldd	r18, Y+4	; 0x04
    1048:	3d 81       	ldd	r19, Y+5	; 0x05
    104a:	22 30       	cpi	r18, 0x02	; 2
    104c:	31 05       	cpc	r19, r1
    104e:	2c f4       	brge	.+10     	; 0x105a <DIO_u8SetPortValue+0x3c>
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	9d 81       	ldd	r25, Y+5	; 0x05
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	61 f0       	breq	.+24     	; 0x1070 <DIO_u8SetPortValue+0x52>
    1058:	1f c0       	rjmp	.+62     	; 0x1098 <DIO_u8SetPortValue+0x7a>
    105a:	2c 81       	ldd	r18, Y+4	; 0x04
    105c:	3d 81       	ldd	r19, Y+5	; 0x05
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	31 05       	cpc	r19, r1
    1062:	81 f0       	breq	.+32     	; 0x1084 <DIO_u8SetPortValue+0x66>
    1064:	8c 81       	ldd	r24, Y+4	; 0x04
    1066:	9d 81       	ldd	r25, Y+5	; 0x05
    1068:	83 30       	cpi	r24, 0x03	; 3
    106a:	91 05       	cpc	r25, r1
    106c:	81 f0       	breq	.+32     	; 0x108e <DIO_u8SetPortValue+0x70>
    106e:	14 c0       	rjmp	.+40     	; 0x1098 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8_PORTA : PORTA =Copy_u8Value; break;
    1070:	eb e3       	ldi	r30, 0x3B	; 59
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	80 83       	st	Z, r24
    1078:	11 c0       	rjmp	.+34     	; 0x109c <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTB : PORTB =Copy_u8Value; break;
    107a:	e8 e3       	ldi	r30, 0x38	; 56
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	80 83       	st	Z, r24
    1082:	0c c0       	rjmp	.+24     	; 0x109c <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTC : PORTC =Copy_u8Value; break;
    1084:	e5 e3       	ldi	r30, 0x35	; 53
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	80 83       	st	Z, r24
    108c:	07 c0       	rjmp	.+14     	; 0x109c <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTD : PORTD =Copy_u8Value; break;
    108e:	e2 e3       	ldi	r30, 0x32	; 50
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	80 83       	st	Z, r24
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_u8SetPortValue+0x7e>
	default :Local_u8_ErrorState=1;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    109c:	89 81       	ldd	r24, Y+1	; 0x01



}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin, u8 *Copy_Pu8Vlaue)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	27 97       	sbiw	r28, 0x07	; 7
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	8a 83       	std	Y+2, r24	; 0x02
    10c4:	6b 83       	std	Y+3, r22	; 0x03
    10c6:	5d 83       	std	Y+5, r21	; 0x05
    10c8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_ErrorState=0;
    10ca:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Pu8Vlaue != NULL)&&(Copy_u8Pin <=DIO_u8_PIN7))
    10cc:	8c 81       	ldd	r24, Y+4	; 0x04
    10ce:	9d 81       	ldd	r25, Y+5	; 0x05
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <DIO_u8GetPinValue+0x28>
    10d4:	78 c0       	rjmp	.+240    	; 0x11c6 <DIO_u8GetPinValue+0x118>
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	88 30       	cpi	r24, 0x08	; 8
    10da:	08 f0       	brcs	.+2      	; 0x10de <DIO_u8GetPinValue+0x30>
    10dc:	74 c0       	rjmp	.+232    	; 0x11c6 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	3f 83       	std	Y+7, r19	; 0x07
    10e6:	2e 83       	std	Y+6, r18	; 0x06
    10e8:	4e 81       	ldd	r20, Y+6	; 0x06
    10ea:	5f 81       	ldd	r21, Y+7	; 0x07
    10ec:	41 30       	cpi	r20, 0x01	; 1
    10ee:	51 05       	cpc	r21, r1
    10f0:	59 f1       	breq	.+86     	; 0x1148 <DIO_u8GetPinValue+0x9a>
    10f2:	8e 81       	ldd	r24, Y+6	; 0x06
    10f4:	9f 81       	ldd	r25, Y+7	; 0x07
    10f6:	82 30       	cpi	r24, 0x02	; 2
    10f8:	91 05       	cpc	r25, r1
    10fa:	34 f4       	brge	.+12     	; 0x1108 <DIO_u8GetPinValue+0x5a>
    10fc:	2e 81       	ldd	r18, Y+6	; 0x06
    10fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1100:	21 15       	cp	r18, r1
    1102:	31 05       	cpc	r19, r1
    1104:	69 f0       	breq	.+26     	; 0x1120 <DIO_u8GetPinValue+0x72>
    1106:	5c c0       	rjmp	.+184    	; 0x11c0 <DIO_u8GetPinValue+0x112>
    1108:	4e 81       	ldd	r20, Y+6	; 0x06
    110a:	5f 81       	ldd	r21, Y+7	; 0x07
    110c:	42 30       	cpi	r20, 0x02	; 2
    110e:	51 05       	cpc	r21, r1
    1110:	79 f1       	breq	.+94     	; 0x1170 <DIO_u8GetPinValue+0xc2>
    1112:	8e 81       	ldd	r24, Y+6	; 0x06
    1114:	9f 81       	ldd	r25, Y+7	; 0x07
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	91 05       	cpc	r25, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <DIO_u8GetPinValue+0x70>
    111c:	3d c0       	rjmp	.+122    	; 0x1198 <DIO_u8GetPinValue+0xea>
    111e:	50 c0       	rjmp	.+160    	; 0x11c0 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8_PORTA : *Copy_Pu8Vlaue =GET_BIT(PINA , Copy_u8Pin); break;
    1120:	e9 e3       	ldi	r30, 0x39	; 57
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a9 01       	movw	r20, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <DIO_u8GetPinValue+0x8a>
    1134:	55 95       	asr	r21
    1136:	47 95       	ror	r20
    1138:	8a 95       	dec	r24
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <DIO_u8GetPinValue+0x86>
    113c:	ca 01       	movw	r24, r20
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	ec 81       	ldd	r30, Y+4	; 0x04
    1142:	fd 81       	ldd	r31, Y+5	; 0x05
    1144:	80 83       	st	Z, r24
    1146:	41 c0       	rjmp	.+130    	; 0x11ca <DIO_u8GetPinValue+0x11c>
		case DIO_u8_PORTB : *Copy_Pu8Vlaue =GET_BIT(PINB , Copy_u8Pin); break;
    1148:	e6 e3       	ldi	r30, 0x36	; 54
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	a9 01       	movw	r20, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_u8GetPinValue+0xb2>
    115c:	55 95       	asr	r21
    115e:	47 95       	ror	r20
    1160:	8a 95       	dec	r24
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_u8GetPinValue+0xae>
    1164:	ca 01       	movw	r24, r20
    1166:	81 70       	andi	r24, 0x01	; 1
    1168:	ec 81       	ldd	r30, Y+4	; 0x04
    116a:	fd 81       	ldd	r31, Y+5	; 0x05
    116c:	80 83       	st	Z, r24
    116e:	2d c0       	rjmp	.+90     	; 0x11ca <DIO_u8GetPinValue+0x11c>
		case DIO_u8_PORTC : *Copy_Pu8Vlaue =GET_BIT(PINC , Copy_u8Pin); break;
    1170:	e3 e3       	ldi	r30, 0x33	; 51
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a9 01       	movw	r20, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_u8GetPinValue+0xda>
    1184:	55 95       	asr	r21
    1186:	47 95       	ror	r20
    1188:	8a 95       	dec	r24
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_u8GetPinValue+0xd6>
    118c:	ca 01       	movw	r24, r20
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	ec 81       	ldd	r30, Y+4	; 0x04
    1192:	fd 81       	ldd	r31, Y+5	; 0x05
    1194:	80 83       	st	Z, r24
    1196:	19 c0       	rjmp	.+50     	; 0x11ca <DIO_u8GetPinValue+0x11c>
		case DIO_u8_PORTD : *Copy_Pu8Vlaue =GET_BIT(PIND , Copy_u8Pin); break;
    1198:	e0 e3       	ldi	r30, 0x30	; 48
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	a9 01       	movw	r20, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_u8GetPinValue+0x102>
    11ac:	55 95       	asr	r21
    11ae:	47 95       	ror	r20
    11b0:	8a 95       	dec	r24
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_u8GetPinValue+0xfe>
    11b4:	ca 01       	movw	r24, r20
    11b6:	81 70       	andi	r24, 0x01	; 1
    11b8:	ec 81       	ldd	r30, Y+4	; 0x04
    11ba:	fd 81       	ldd	r31, Y+5	; 0x05
    11bc:	80 83       	st	Z, r24
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <DIO_u8GetPinValue+0x11c>
		default :Local_u8_ErrorState=1;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8_ErrorState=1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8_ErrorState;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01

}
    11cc:	27 96       	adiw	r28, 0x07	; 7
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <GIE_voidEnable>:
#include "BIT_MATH.h"
#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
   SET_BIT(SREG,SREG_I);
    11e6:	af e5       	ldi	r26, 0x5F	; 95
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	ef e5       	ldi	r30, 0x5F	; 95
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	80 68       	ori	r24, 0x80	; 128
    11f2:	8c 93       	st	X, r24
}
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <GIE_voidDisable>:


void GIE_voidDisable(void)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1202:	af e5       	ldi	r26, 0x5F	; 95
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	ef e5       	ldi	r30, 0x5F	; 95
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8f 77       	andi	r24, 0x7F	; 127
    120e:	8c 93       	st	X, r24

}
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <HLCD_VoidInit>:




void HLCD_VoidInit(void)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	e8 97       	sbiw	r28, 0x38	; 56
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61

	/* set Port direction output */
	DIO_u8SetPortDirection(HLCD_U8_DATA_PORT,DIO_u8_PORT_OUTPUT);
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	6f ef       	ldi	r22, 0xFF	; 255
    122e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_u8SetPortDirection>
	/* RS DIR OUT*/
	DIO_u8SetPinDirection(HLCD_U8_CONTROL_PORT,HLCD_U8_RS_PIN,DIO_u8_PIN_OUTPUT);
    1232:	83 e0       	ldi	r24, 0x03	; 3
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	41 e0       	ldi	r20, 0x01	; 1
    1238:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	/* RW DIR OUT*/
	DIO_u8SetPinDirection(HLCD_U8_CONTROL_PORT,HLCD_U8_RW_PIN,DIO_u8_PIN_OUTPUT);
    123c:	83 e0       	ldi	r24, 0x03	; 3
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	/* EN DIR OUT*/
	DIO_u8SetPinDirection(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_OUTPUT);
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	62 e0       	ldi	r22, 0x02	; 2
    124a:	41 e0       	ldi	r20, 0x01	; 1
    124c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	a0 e2       	ldi	r26, 0x20	; 32
    1256:	b2 e4       	ldi	r27, 0x42	; 66
    1258:	8d ab       	std	Y+53, r24	; 0x35
    125a:	9e ab       	std	Y+54, r25	; 0x36
    125c:	af ab       	std	Y+55, r26	; 0x37
    125e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1260:	6d a9       	ldd	r22, Y+53	; 0x35
    1262:	7e a9       	ldd	r23, Y+54	; 0x36
    1264:	8f a9       	ldd	r24, Y+55	; 0x37
    1266:	98 ad       	ldd	r25, Y+56	; 0x38
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	4a ef       	ldi	r20, 0xFA	; 250
    126e:	54 e4       	ldi	r21, 0x44	; 68
    1270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	89 ab       	std	Y+49, r24	; 0x31
    127a:	9a ab       	std	Y+50, r25	; 0x32
    127c:	ab ab       	std	Y+51, r26	; 0x33
    127e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1280:	69 a9       	ldd	r22, Y+49	; 0x31
    1282:	7a a9       	ldd	r23, Y+50	; 0x32
    1284:	8b a9       	ldd	r24, Y+51	; 0x33
    1286:	9c a9       	ldd	r25, Y+52	; 0x34
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e8       	ldi	r20, 0x80	; 128
    128e:	5f e3       	ldi	r21, 0x3F	; 63
    1290:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1294:	88 23       	and	r24, r24
    1296:	2c f4       	brge	.+10     	; 0x12a2 <HLCD_VoidInit+0x8c>
		__ticks = 1;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	98 ab       	std	Y+48, r25	; 0x30
    129e:	8f a7       	std	Y+47, r24	; 0x2f
    12a0:	3f c0       	rjmp	.+126    	; 0x1320 <HLCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    12a2:	69 a9       	ldd	r22, Y+49	; 0x31
    12a4:	7a a9       	ldd	r23, Y+50	; 0x32
    12a6:	8b a9       	ldd	r24, Y+51	; 0x33
    12a8:	9c a9       	ldd	r25, Y+52	; 0x34
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	3f ef       	ldi	r19, 0xFF	; 255
    12ae:	4f e7       	ldi	r20, 0x7F	; 127
    12b0:	57 e4       	ldi	r21, 0x47	; 71
    12b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b6:	18 16       	cp	r1, r24
    12b8:	4c f5       	brge	.+82     	; 0x130c <HLCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ba:	6d a9       	ldd	r22, Y+53	; 0x35
    12bc:	7e a9       	ldd	r23, Y+54	; 0x36
    12be:	8f a9       	ldd	r24, Y+55	; 0x37
    12c0:	98 ad       	ldd	r25, Y+56	; 0x38
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e2       	ldi	r20, 0x20	; 32
    12c8:	51 e4       	ldi	r21, 0x41	; 65
    12ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	bc 01       	movw	r22, r24
    12d4:	cd 01       	movw	r24, r26
    12d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	98 ab       	std	Y+48, r25	; 0x30
    12e0:	8f a7       	std	Y+47, r24	; 0x2f
    12e2:	0f c0       	rjmp	.+30     	; 0x1302 <HLCD_VoidInit+0xec>
    12e4:	88 ec       	ldi	r24, 0xC8	; 200
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	9e a7       	std	Y+46, r25	; 0x2e
    12ea:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    12ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <HLCD_VoidInit+0xda>
    12f4:	9e a7       	std	Y+46, r25	; 0x2e
    12f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    12fa:	98 a9       	ldd	r25, Y+48	; 0x30
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	98 ab       	std	Y+48, r25	; 0x30
    1300:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1302:	8f a5       	ldd	r24, Y+47	; 0x2f
    1304:	98 a9       	ldd	r25, Y+48	; 0x30
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	69 f7       	brne	.-38     	; 0x12e4 <HLCD_VoidInit+0xce>
    130a:	14 c0       	rjmp	.+40     	; 0x1334 <HLCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130c:	69 a9       	ldd	r22, Y+49	; 0x31
    130e:	7a a9       	ldd	r23, Y+50	; 0x32
    1310:	8b a9       	ldd	r24, Y+51	; 0x33
    1312:	9c a9       	ldd	r25, Y+52	; 0x34
    1314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	98 ab       	std	Y+48, r25	; 0x30
    131e:	8f a7       	std	Y+47, r24	; 0x2f
    1320:	8f a5       	ldd	r24, Y+47	; 0x2f
    1322:	98 a9       	ldd	r25, Y+48	; 0x30
    1324:	9c a7       	std	Y+44, r25	; 0x2c
    1326:	8b a7       	std	Y+43, r24	; 0x2b
    1328:	8b a5       	ldd	r24, Y+43	; 0x2b
    132a:	9c a5       	ldd	r25, Y+44	; 0x2c
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <HLCD_VoidInit+0x116>
    1330:	9c a7       	std	Y+44, r25	; 0x2c
    1332:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);
	/* function set 8_bit mode , 2-Line ,font_type 5*7 */
	HLCD_VoidSendCommand(FUNCTIONSET);
    1334:	88 e3       	ldi	r24, 0x38	; 56
    1336:	0e 94 15 0c 	call	0x182a	; 0x182a <HLCD_VoidSendCommand>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	a0 e8       	ldi	r26, 0x80	; 128
    1340:	bf e3       	ldi	r27, 0x3F	; 63
    1342:	8f a3       	std	Y+39, r24	; 0x27
    1344:	98 a7       	std	Y+40, r25	; 0x28
    1346:	a9 a7       	std	Y+41, r26	; 0x29
    1348:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134a:	6f a1       	ldd	r22, Y+39	; 0x27
    134c:	78 a5       	ldd	r23, Y+40	; 0x28
    134e:	89 a5       	ldd	r24, Y+41	; 0x29
    1350:	9a a5       	ldd	r25, Y+42	; 0x2a
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	4a ef       	ldi	r20, 0xFA	; 250
    1358:	54 e4       	ldi	r21, 0x44	; 68
    135a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	8b a3       	std	Y+35, r24	; 0x23
    1364:	9c a3       	std	Y+36, r25	; 0x24
    1366:	ad a3       	std	Y+37, r26	; 0x25
    1368:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    136a:	6b a1       	ldd	r22, Y+35	; 0x23
    136c:	7c a1       	ldd	r23, Y+36	; 0x24
    136e:	8d a1       	ldd	r24, Y+37	; 0x25
    1370:	9e a1       	ldd	r25, Y+38	; 0x26
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e8       	ldi	r20, 0x80	; 128
    1378:	5f e3       	ldi	r21, 0x3F	; 63
    137a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    137e:	88 23       	and	r24, r24
    1380:	2c f4       	brge	.+10     	; 0x138c <HLCD_VoidInit+0x176>
		__ticks = 1;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9a a3       	std	Y+34, r25	; 0x22
    1388:	89 a3       	std	Y+33, r24	; 0x21
    138a:	3f c0       	rjmp	.+126    	; 0x140a <HLCD_VoidInit+0x1f4>
	else if (__tmp > 65535)
    138c:	6b a1       	ldd	r22, Y+35	; 0x23
    138e:	7c a1       	ldd	r23, Y+36	; 0x24
    1390:	8d a1       	ldd	r24, Y+37	; 0x25
    1392:	9e a1       	ldd	r25, Y+38	; 0x26
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	3f ef       	ldi	r19, 0xFF	; 255
    1398:	4f e7       	ldi	r20, 0x7F	; 127
    139a:	57 e4       	ldi	r21, 0x47	; 71
    139c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a0:	18 16       	cp	r1, r24
    13a2:	4c f5       	brge	.+82     	; 0x13f6 <HLCD_VoidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a4:	6f a1       	ldd	r22, Y+39	; 0x27
    13a6:	78 a5       	ldd	r23, Y+40	; 0x28
    13a8:	89 a5       	ldd	r24, Y+41	; 0x29
    13aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e2       	ldi	r20, 0x20	; 32
    13b2:	51 e4       	ldi	r21, 0x41	; 65
    13b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	bc 01       	movw	r22, r24
    13be:	cd 01       	movw	r24, r26
    13c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	9a a3       	std	Y+34, r25	; 0x22
    13ca:	89 a3       	std	Y+33, r24	; 0x21
    13cc:	0f c0       	rjmp	.+30     	; 0x13ec <HLCD_VoidInit+0x1d6>
    13ce:	88 ec       	ldi	r24, 0xC8	; 200
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	98 a3       	std	Y+32, r25	; 0x20
    13d4:	8f 8f       	std	Y+31, r24	; 0x1f
    13d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13d8:	98 a1       	ldd	r25, Y+32	; 0x20
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	f1 f7       	brne	.-4      	; 0x13da <HLCD_VoidInit+0x1c4>
    13de:	98 a3       	std	Y+32, r25	; 0x20
    13e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e2:	89 a1       	ldd	r24, Y+33	; 0x21
    13e4:	9a a1       	ldd	r25, Y+34	; 0x22
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	9a a3       	std	Y+34, r25	; 0x22
    13ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ec:	89 a1       	ldd	r24, Y+33	; 0x21
    13ee:	9a a1       	ldd	r25, Y+34	; 0x22
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	69 f7       	brne	.-38     	; 0x13ce <HLCD_VoidInit+0x1b8>
    13f4:	14 c0       	rjmp	.+40     	; 0x141e <HLCD_VoidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f6:	6b a1       	ldd	r22, Y+35	; 0x23
    13f8:	7c a1       	ldd	r23, Y+36	; 0x24
    13fa:	8d a1       	ldd	r24, Y+37	; 0x25
    13fc:	9e a1       	ldd	r25, Y+38	; 0x26
    13fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	9a a3       	std	Y+34, r25	; 0x22
    1408:	89 a3       	std	Y+33, r24	; 0x21
    140a:	89 a1       	ldd	r24, Y+33	; 0x21
    140c:	9a a1       	ldd	r25, Y+34	; 0x22
    140e:	9e 8f       	std	Y+30, r25	; 0x1e
    1410:	8d 8f       	std	Y+29, r24	; 0x1d
    1412:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1414:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <HLCD_VoidInit+0x200>
    141a:	9e 8f       	std	Y+30, r25	; 0x1e
    141c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Display on/off control*/
	HLCD_VoidSendCommand(DISPLAYON);
    141e:	8f e0       	ldi	r24, 0x0F	; 15
    1420:	0e 94 15 0c 	call	0x182a	; 0x182a <HLCD_VoidSendCommand>
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a0 e8       	ldi	r26, 0x80	; 128
    142a:	bf e3       	ldi	r27, 0x3F	; 63
    142c:	89 8f       	std	Y+25, r24	; 0x19
    142e:	9a 8f       	std	Y+26, r25	; 0x1a
    1430:	ab 8f       	std	Y+27, r26	; 0x1b
    1432:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1434:	69 8d       	ldd	r22, Y+25	; 0x19
    1436:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1438:	8b 8d       	ldd	r24, Y+27	; 0x1b
    143a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	4a ef       	ldi	r20, 0xFA	; 250
    1442:	54 e4       	ldi	r21, 0x44	; 68
    1444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	8d 8b       	std	Y+21, r24	; 0x15
    144e:	9e 8b       	std	Y+22, r25	; 0x16
    1450:	af 8b       	std	Y+23, r26	; 0x17
    1452:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1454:	6d 89       	ldd	r22, Y+21	; 0x15
    1456:	7e 89       	ldd	r23, Y+22	; 0x16
    1458:	8f 89       	ldd	r24, Y+23	; 0x17
    145a:	98 8d       	ldd	r25, Y+24	; 0x18
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
    1462:	5f e3       	ldi	r21, 0x3F	; 63
    1464:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1468:	88 23       	and	r24, r24
    146a:	2c f4       	brge	.+10     	; 0x1476 <HLCD_VoidInit+0x260>
		__ticks = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9c 8b       	std	Y+20, r25	; 0x14
    1472:	8b 8b       	std	Y+19, r24	; 0x13
    1474:	3f c0       	rjmp	.+126    	; 0x14f4 <HLCD_VoidInit+0x2de>
	else if (__tmp > 65535)
    1476:	6d 89       	ldd	r22, Y+21	; 0x15
    1478:	7e 89       	ldd	r23, Y+22	; 0x16
    147a:	8f 89       	ldd	r24, Y+23	; 0x17
    147c:	98 8d       	ldd	r25, Y+24	; 0x18
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	3f ef       	ldi	r19, 0xFF	; 255
    1482:	4f e7       	ldi	r20, 0x7F	; 127
    1484:	57 e4       	ldi	r21, 0x47	; 71
    1486:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    148a:	18 16       	cp	r1, r24
    148c:	4c f5       	brge	.+82     	; 0x14e0 <HLCD_VoidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148e:	69 8d       	ldd	r22, Y+25	; 0x19
    1490:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1492:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1494:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	51 e4       	ldi	r21, 0x41	; 65
    149e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9c 8b       	std	Y+20, r25	; 0x14
    14b4:	8b 8b       	std	Y+19, r24	; 0x13
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <HLCD_VoidInit+0x2c0>
    14b8:	88 ec       	ldi	r24, 0xC8	; 200
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9a 8b       	std	Y+18, r25	; 0x12
    14be:	89 8b       	std	Y+17, r24	; 0x11
    14c0:	89 89       	ldd	r24, Y+17	; 0x11
    14c2:	9a 89       	ldd	r25, Y+18	; 0x12
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <HLCD_VoidInit+0x2ae>
    14c8:	9a 8b       	std	Y+18, r25	; 0x12
    14ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14cc:	8b 89       	ldd	r24, Y+19	; 0x13
    14ce:	9c 89       	ldd	r25, Y+20	; 0x14
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	9c 8b       	std	Y+20, r25	; 0x14
    14d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d6:	8b 89       	ldd	r24, Y+19	; 0x13
    14d8:	9c 89       	ldd	r25, Y+20	; 0x14
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	69 f7       	brne	.-38     	; 0x14b8 <HLCD_VoidInit+0x2a2>
    14de:	14 c0       	rjmp	.+40     	; 0x1508 <HLCD_VoidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e0:	6d 89       	ldd	r22, Y+21	; 0x15
    14e2:	7e 89       	ldd	r23, Y+22	; 0x16
    14e4:	8f 89       	ldd	r24, Y+23	; 0x17
    14e6:	98 8d       	ldd	r25, Y+24	; 0x18
    14e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9c 8b       	std	Y+20, r25	; 0x14
    14f2:	8b 8b       	std	Y+19, r24	; 0x13
    14f4:	8b 89       	ldd	r24, Y+19	; 0x13
    14f6:	9c 89       	ldd	r25, Y+20	; 0x14
    14f8:	98 8b       	std	Y+16, r25	; 0x10
    14fa:	8f 87       	std	Y+15, r24	; 0x0f
    14fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14fe:	98 89       	ldd	r25, Y+16	; 0x10
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <HLCD_VoidInit+0x2ea>
    1504:	98 8b       	std	Y+16, r25	; 0x10
    1506:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* display Clear*/
	HLCD_VoidSendCommand(DISPLAYCLEAR);
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	0e 94 15 0c 	call	0x182a	; 0x182a <HLCD_VoidSendCommand>
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a0 e0       	ldi	r26, 0x00	; 0
    1514:	b0 e4       	ldi	r27, 0x40	; 64
    1516:	8b 87       	std	Y+11, r24	; 0x0b
    1518:	9c 87       	std	Y+12, r25	; 0x0c
    151a:	ad 87       	std	Y+13, r26	; 0x0d
    151c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1520:	7c 85       	ldd	r23, Y+12	; 0x0c
    1522:	8d 85       	ldd	r24, Y+13	; 0x0d
    1524:	9e 85       	ldd	r25, Y+14	; 0x0e
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	4a ef       	ldi	r20, 0xFA	; 250
    152c:	54 e4       	ldi	r21, 0x44	; 68
    152e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	8f 83       	std	Y+7, r24	; 0x07
    1538:	98 87       	std	Y+8, r25	; 0x08
    153a:	a9 87       	std	Y+9, r26	; 0x09
    153c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    153e:	6f 81       	ldd	r22, Y+7	; 0x07
    1540:	78 85       	ldd	r23, Y+8	; 0x08
    1542:	89 85       	ldd	r24, Y+9	; 0x09
    1544:	9a 85       	ldd	r25, Y+10	; 0x0a
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e8       	ldi	r20, 0x80	; 128
    154c:	5f e3       	ldi	r21, 0x3F	; 63
    154e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1552:	88 23       	and	r24, r24
    1554:	2c f4       	brge	.+10     	; 0x1560 <HLCD_VoidInit+0x34a>
		__ticks = 1;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9e 83       	std	Y+6, r25	; 0x06
    155c:	8d 83       	std	Y+5, r24	; 0x05
    155e:	3f c0       	rjmp	.+126    	; 0x15de <HLCD_VoidInit+0x3c8>
	else if (__tmp > 65535)
    1560:	6f 81       	ldd	r22, Y+7	; 0x07
    1562:	78 85       	ldd	r23, Y+8	; 0x08
    1564:	89 85       	ldd	r24, Y+9	; 0x09
    1566:	9a 85       	ldd	r25, Y+10	; 0x0a
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	3f ef       	ldi	r19, 0xFF	; 255
    156c:	4f e7       	ldi	r20, 0x7F	; 127
    156e:	57 e4       	ldi	r21, 0x47	; 71
    1570:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1574:	18 16       	cp	r1, r24
    1576:	4c f5       	brge	.+82     	; 0x15ca <HLCD_VoidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1578:	6b 85       	ldd	r22, Y+11	; 0x0b
    157a:	7c 85       	ldd	r23, Y+12	; 0x0c
    157c:	8d 85       	ldd	r24, Y+13	; 0x0d
    157e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e2       	ldi	r20, 0x20	; 32
    1586:	51 e4       	ldi	r21, 0x41	; 65
    1588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	bc 01       	movw	r22, r24
    1592:	cd 01       	movw	r24, r26
    1594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	9e 83       	std	Y+6, r25	; 0x06
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	0f c0       	rjmp	.+30     	; 0x15c0 <HLCD_VoidInit+0x3aa>
    15a2:	88 ec       	ldi	r24, 0xC8	; 200
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9c 83       	std	Y+4, r25	; 0x04
    15a8:	8b 83       	std	Y+3, r24	; 0x03
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <HLCD_VoidInit+0x398>
    15b2:	9c 83       	std	Y+4, r25	; 0x04
    15b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	69 f7       	brne	.-38     	; 0x15a2 <HLCD_VoidInit+0x38c>
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <HLCD_VoidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ca:	6f 81       	ldd	r22, Y+7	; 0x07
    15cc:	78 85       	ldd	r23, Y+8	; 0x08
    15ce:	89 85       	ldd	r24, Y+9	; 0x09
    15d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	9e 83       	std	Y+6, r25	; 0x06
    15dc:	8d 83       	std	Y+5, r24	; 0x05
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	9a 83       	std	Y+2, r25	; 0x02
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <HLCD_VoidInit+0x3d4>
    15ee:	9a 83       	std	Y+2, r25	; 0x02
    15f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	/* return to home*/
	HLCD_VoidSendCommand(0b00000010);
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	0e 94 15 0c 	call	0x182a	; 0x182a <HLCD_VoidSendCommand>
}
    15f8:	e8 96       	adiw	r28, 0x38	; 56
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <HLCD_VoidSendChar>:


void HLCD_VoidSendChar(u8 copy_u8char)
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	6d 97       	sbiw	r28, 0x1d	; 29
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	8d 8f       	std	Y+29, r24	; 0x1d
	/*     RS=1   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RS_PIN,DIO_u8_PIN_HIGH);
    1620:	83 e0       	ldi	r24, 0x03	; 3
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinValue>
	/*     RW=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RW_PIN,DIO_u8_PIN_LOW);
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinValue>

	/*     Data   */
	DIO_u8SetPortValue(HLCD_U8_DATA_PORT,copy_u8char);
    1634:	82 e0       	ldi	r24, 0x02	; 2
    1636:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1638:	0e 94 0f 08 	call	0x101e	; 0x101e <DIO_u8SetPortValue>

	/*     EN=1   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_HIGH);
    163c:	83 e0       	ldi	r24, 0x03	; 3
    163e:	62 e0       	ldi	r22, 0x02	; 2
    1640:	41 e0       	ldi	r20, 0x01	; 1
    1642:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinValue>
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a0 e0       	ldi	r26, 0x00	; 0
    164c:	b0 e4       	ldi	r27, 0x40	; 64
    164e:	89 8f       	std	Y+25, r24	; 0x19
    1650:	9a 8f       	std	Y+26, r25	; 0x1a
    1652:	ab 8f       	std	Y+27, r26	; 0x1b
    1654:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1656:	69 8d       	ldd	r22, Y+25	; 0x19
    1658:	7a 8d       	ldd	r23, Y+26	; 0x1a
    165a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    165c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	4a ef       	ldi	r20, 0xFA	; 250
    1664:	54 e4       	ldi	r21, 0x44	; 68
    1666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	8d 8b       	std	Y+21, r24	; 0x15
    1670:	9e 8b       	std	Y+22, r25	; 0x16
    1672:	af 8b       	std	Y+23, r26	; 0x17
    1674:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1676:	6d 89       	ldd	r22, Y+21	; 0x15
    1678:	7e 89       	ldd	r23, Y+22	; 0x16
    167a:	8f 89       	ldd	r24, Y+23	; 0x17
    167c:	98 8d       	ldd	r25, Y+24	; 0x18
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	40 e8       	ldi	r20, 0x80	; 128
    1684:	5f e3       	ldi	r21, 0x3F	; 63
    1686:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    168a:	88 23       	and	r24, r24
    168c:	2c f4       	brge	.+10     	; 0x1698 <HLCD_VoidSendChar+0x8e>
		__ticks = 1;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	9c 8b       	std	Y+20, r25	; 0x14
    1694:	8b 8b       	std	Y+19, r24	; 0x13
    1696:	3f c0       	rjmp	.+126    	; 0x1716 <HLCD_VoidSendChar+0x10c>
	else if (__tmp > 65535)
    1698:	6d 89       	ldd	r22, Y+21	; 0x15
    169a:	7e 89       	ldd	r23, Y+22	; 0x16
    169c:	8f 89       	ldd	r24, Y+23	; 0x17
    169e:	98 8d       	ldd	r25, Y+24	; 0x18
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	3f ef       	ldi	r19, 0xFF	; 255
    16a4:	4f e7       	ldi	r20, 0x7F	; 127
    16a6:	57 e4       	ldi	r21, 0x47	; 71
    16a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ac:	18 16       	cp	r1, r24
    16ae:	4c f5       	brge	.+82     	; 0x1702 <HLCD_VoidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b0:	69 8d       	ldd	r22, Y+25	; 0x19
    16b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e2       	ldi	r20, 0x20	; 32
    16be:	51 e4       	ldi	r21, 0x41	; 65
    16c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	9c 8b       	std	Y+20, r25	; 0x14
    16d6:	8b 8b       	std	Y+19, r24	; 0x13
    16d8:	0f c0       	rjmp	.+30     	; 0x16f8 <HLCD_VoidSendChar+0xee>
    16da:	88 ec       	ldi	r24, 0xC8	; 200
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9a 8b       	std	Y+18, r25	; 0x12
    16e0:	89 8b       	std	Y+17, r24	; 0x11
    16e2:	89 89       	ldd	r24, Y+17	; 0x11
    16e4:	9a 89       	ldd	r25, Y+18	; 0x12
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <HLCD_VoidSendChar+0xdc>
    16ea:	9a 8b       	std	Y+18, r25	; 0x12
    16ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ee:	8b 89       	ldd	r24, Y+19	; 0x13
    16f0:	9c 89       	ldd	r25, Y+20	; 0x14
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	9c 8b       	std	Y+20, r25	; 0x14
    16f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f8:	8b 89       	ldd	r24, Y+19	; 0x13
    16fa:	9c 89       	ldd	r25, Y+20	; 0x14
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	69 f7       	brne	.-38     	; 0x16da <HLCD_VoidSendChar+0xd0>
    1700:	14 c0       	rjmp	.+40     	; 0x172a <HLCD_VoidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1702:	6d 89       	ldd	r22, Y+21	; 0x15
    1704:	7e 89       	ldd	r23, Y+22	; 0x16
    1706:	8f 89       	ldd	r24, Y+23	; 0x17
    1708:	98 8d       	ldd	r25, Y+24	; 0x18
    170a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	9c 8b       	std	Y+20, r25	; 0x14
    1714:	8b 8b       	std	Y+19, r24	; 0x13
    1716:	8b 89       	ldd	r24, Y+19	; 0x13
    1718:	9c 89       	ldd	r25, Y+20	; 0x14
    171a:	98 8b       	std	Y+16, r25	; 0x10
    171c:	8f 87       	std	Y+15, r24	; 0x0f
    171e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1720:	98 89       	ldd	r25, Y+16	; 0x10
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <HLCD_VoidSendChar+0x118>
    1726:	98 8b       	std	Y+16, r25	; 0x10
    1728:	8f 87       	std	Y+15, r24	; 0x0f
	/*       delay 2ms  */
	_delay_ms(2);
	/*     EN=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_LOW);
    172a:	83 e0       	ldi	r24, 0x03	; 3
    172c:	62 e0       	ldi	r22, 0x02	; 2
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinValue>
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a0 e0       	ldi	r26, 0x00	; 0
    173a:	b0 e4       	ldi	r27, 0x40	; 64
    173c:	8b 87       	std	Y+11, r24	; 0x0b
    173e:	9c 87       	std	Y+12, r25	; 0x0c
    1740:	ad 87       	std	Y+13, r26	; 0x0d
    1742:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1744:	6b 85       	ldd	r22, Y+11	; 0x0b
    1746:	7c 85       	ldd	r23, Y+12	; 0x0c
    1748:	8d 85       	ldd	r24, Y+13	; 0x0d
    174a:	9e 85       	ldd	r25, Y+14	; 0x0e
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4a ef       	ldi	r20, 0xFA	; 250
    1752:	54 e4       	ldi	r21, 0x44	; 68
    1754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	8f 83       	std	Y+7, r24	; 0x07
    175e:	98 87       	std	Y+8, r25	; 0x08
    1760:	a9 87       	std	Y+9, r26	; 0x09
    1762:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1764:	6f 81       	ldd	r22, Y+7	; 0x07
    1766:	78 85       	ldd	r23, Y+8	; 0x08
    1768:	89 85       	ldd	r24, Y+9	; 0x09
    176a:	9a 85       	ldd	r25, Y+10	; 0x0a
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e8       	ldi	r20, 0x80	; 128
    1772:	5f e3       	ldi	r21, 0x3F	; 63
    1774:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1778:	88 23       	and	r24, r24
    177a:	2c f4       	brge	.+10     	; 0x1786 <HLCD_VoidSendChar+0x17c>
		__ticks = 1;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	9e 83       	std	Y+6, r25	; 0x06
    1782:	8d 83       	std	Y+5, r24	; 0x05
    1784:	3f c0       	rjmp	.+126    	; 0x1804 <HLCD_VoidSendChar+0x1fa>
	else if (__tmp > 65535)
    1786:	6f 81       	ldd	r22, Y+7	; 0x07
    1788:	78 85       	ldd	r23, Y+8	; 0x08
    178a:	89 85       	ldd	r24, Y+9	; 0x09
    178c:	9a 85       	ldd	r25, Y+10	; 0x0a
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	3f ef       	ldi	r19, 0xFF	; 255
    1792:	4f e7       	ldi	r20, 0x7F	; 127
    1794:	57 e4       	ldi	r21, 0x47	; 71
    1796:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    179a:	18 16       	cp	r1, r24
    179c:	4c f5       	brge	.+82     	; 0x17f0 <HLCD_VoidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179e:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e2       	ldi	r20, 0x20	; 32
    17ac:	51 e4       	ldi	r21, 0x41	; 65
    17ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	bc 01       	movw	r22, r24
    17b8:	cd 01       	movw	r24, r26
    17ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	9e 83       	std	Y+6, r25	; 0x06
    17c4:	8d 83       	std	Y+5, r24	; 0x05
    17c6:	0f c0       	rjmp	.+30     	; 0x17e6 <HLCD_VoidSendChar+0x1dc>
    17c8:	88 ec       	ldi	r24, 0xC8	; 200
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9c 83       	std	Y+4, r25	; 0x04
    17ce:	8b 83       	std	Y+3, r24	; 0x03
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <HLCD_VoidSendChar+0x1ca>
    17d8:	9c 83       	std	Y+4, r25	; 0x04
    17da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	9e 83       	std	Y+6, r25	; 0x06
    17e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	69 f7       	brne	.-38     	; 0x17c8 <HLCD_VoidSendChar+0x1be>
    17ee:	14 c0       	rjmp	.+40     	; 0x1818 <HLCD_VoidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f0:	6f 81       	ldd	r22, Y+7	; 0x07
    17f2:	78 85       	ldd	r23, Y+8	; 0x08
    17f4:	89 85       	ldd	r24, Y+9	; 0x09
    17f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	9e 81       	ldd	r25, Y+6	; 0x06
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	9a 81       	ldd	r25, Y+2	; 0x02
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <HLCD_VoidSendChar+0x206>
    1814:	9a 83       	std	Y+2, r25	; 0x02
    1816:	89 83       	std	Y+1, r24	; 0x01
	/*       delay 2ms  */
	_delay_ms(2);

}
    1818:	6d 96       	adiw	r28, 0x1d	; 29
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <HLCD_VoidSendCommand>:



void HLCD_VoidSendCommand(u8 copy_u8command)

{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	6d 97       	sbiw	r28, 0x1d	; 29
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	8d 8f       	std	Y+29, r24	; 0x1d
	/*     RS=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RS_PIN,DIO_u8_PIN_LOW);
    1840:	83 e0       	ldi	r24, 0x03	; 3
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinValue>
	/*     RW=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RW_PIN,DIO_u8_PIN_LOW);
    184a:	83 e0       	ldi	r24, 0x03	; 3
    184c:	61 e0       	ldi	r22, 0x01	; 1
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinValue>

	/*     Command   */
	DIO_u8SetPortValue(HLCD_U8_DATA_PORT,copy_u8command);
    1854:	82 e0       	ldi	r24, 0x02	; 2
    1856:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1858:	0e 94 0f 08 	call	0x101e	; 0x101e <DIO_u8SetPortValue>

	/*     EN=1   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_HIGH);
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	62 e0       	ldi	r22, 0x02	; 2
    1860:	41 e0       	ldi	r20, 0x01	; 1
    1862:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinValue>
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a0 e0       	ldi	r26, 0x00	; 0
    186c:	b0 e4       	ldi	r27, 0x40	; 64
    186e:	89 8f       	std	Y+25, r24	; 0x19
    1870:	9a 8f       	std	Y+26, r25	; 0x1a
    1872:	ab 8f       	std	Y+27, r26	; 0x1b
    1874:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1876:	69 8d       	ldd	r22, Y+25	; 0x19
    1878:	7a 8d       	ldd	r23, Y+26	; 0x1a
    187a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    187c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	4a ef       	ldi	r20, 0xFA	; 250
    1884:	54 e4       	ldi	r21, 0x44	; 68
    1886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	8d 8b       	std	Y+21, r24	; 0x15
    1890:	9e 8b       	std	Y+22, r25	; 0x16
    1892:	af 8b       	std	Y+23, r26	; 0x17
    1894:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1896:	6d 89       	ldd	r22, Y+21	; 0x15
    1898:	7e 89       	ldd	r23, Y+22	; 0x16
    189a:	8f 89       	ldd	r24, Y+23	; 0x17
    189c:	98 8d       	ldd	r25, Y+24	; 0x18
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e8       	ldi	r20, 0x80	; 128
    18a4:	5f e3       	ldi	r21, 0x3F	; 63
    18a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18aa:	88 23       	and	r24, r24
    18ac:	2c f4       	brge	.+10     	; 0x18b8 <HLCD_VoidSendCommand+0x8e>
		__ticks = 1;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	9c 8b       	std	Y+20, r25	; 0x14
    18b4:	8b 8b       	std	Y+19, r24	; 0x13
    18b6:	3f c0       	rjmp	.+126    	; 0x1936 <HLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    18b8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ba:	7e 89       	ldd	r23, Y+22	; 0x16
    18bc:	8f 89       	ldd	r24, Y+23	; 0x17
    18be:	98 8d       	ldd	r25, Y+24	; 0x18
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	3f ef       	ldi	r19, 0xFF	; 255
    18c4:	4f e7       	ldi	r20, 0x7F	; 127
    18c6:	57 e4       	ldi	r21, 0x47	; 71
    18c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18cc:	18 16       	cp	r1, r24
    18ce:	4c f5       	brge	.+82     	; 0x1922 <HLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d0:	69 8d       	ldd	r22, Y+25	; 0x19
    18d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e2       	ldi	r20, 0x20	; 32
    18de:	51 e4       	ldi	r21, 0x41	; 65
    18e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	bc 01       	movw	r22, r24
    18ea:	cd 01       	movw	r24, r26
    18ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	9c 8b       	std	Y+20, r25	; 0x14
    18f6:	8b 8b       	std	Y+19, r24	; 0x13
    18f8:	0f c0       	rjmp	.+30     	; 0x1918 <HLCD_VoidSendCommand+0xee>
    18fa:	88 ec       	ldi	r24, 0xC8	; 200
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	9a 8b       	std	Y+18, r25	; 0x12
    1900:	89 8b       	std	Y+17, r24	; 0x11
    1902:	89 89       	ldd	r24, Y+17	; 0x11
    1904:	9a 89       	ldd	r25, Y+18	; 0x12
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <HLCD_VoidSendCommand+0xdc>
    190a:	9a 8b       	std	Y+18, r25	; 0x12
    190c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190e:	8b 89       	ldd	r24, Y+19	; 0x13
    1910:	9c 89       	ldd	r25, Y+20	; 0x14
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	9c 8b       	std	Y+20, r25	; 0x14
    1916:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1918:	8b 89       	ldd	r24, Y+19	; 0x13
    191a:	9c 89       	ldd	r25, Y+20	; 0x14
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	69 f7       	brne	.-38     	; 0x18fa <HLCD_VoidSendCommand+0xd0>
    1920:	14 c0       	rjmp	.+40     	; 0x194a <HLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1922:	6d 89       	ldd	r22, Y+21	; 0x15
    1924:	7e 89       	ldd	r23, Y+22	; 0x16
    1926:	8f 89       	ldd	r24, Y+23	; 0x17
    1928:	98 8d       	ldd	r25, Y+24	; 0x18
    192a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	9c 8b       	std	Y+20, r25	; 0x14
    1934:	8b 8b       	std	Y+19, r24	; 0x13
    1936:	8b 89       	ldd	r24, Y+19	; 0x13
    1938:	9c 89       	ldd	r25, Y+20	; 0x14
    193a:	98 8b       	std	Y+16, r25	; 0x10
    193c:	8f 87       	std	Y+15, r24	; 0x0f
    193e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1940:	98 89       	ldd	r25, Y+16	; 0x10
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <HLCD_VoidSendCommand+0x118>
    1946:	98 8b       	std	Y+16, r25	; 0x10
    1948:	8f 87       	std	Y+15, r24	; 0x0f
	/*     delay 2ms  */
	_delay_ms(2);
	/*     EN=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_LOW);
    194a:	83 e0       	ldi	r24, 0x03	; 3
    194c:	62 e0       	ldi	r22, 0x02	; 2
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinValue>
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a0 e0       	ldi	r26, 0x00	; 0
    195a:	b0 e4       	ldi	r27, 0x40	; 64
    195c:	8b 87       	std	Y+11, r24	; 0x0b
    195e:	9c 87       	std	Y+12, r25	; 0x0c
    1960:	ad 87       	std	Y+13, r26	; 0x0d
    1962:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1964:	6b 85       	ldd	r22, Y+11	; 0x0b
    1966:	7c 85       	ldd	r23, Y+12	; 0x0c
    1968:	8d 85       	ldd	r24, Y+13	; 0x0d
    196a:	9e 85       	ldd	r25, Y+14	; 0x0e
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	4a ef       	ldi	r20, 0xFA	; 250
    1972:	54 e4       	ldi	r21, 0x44	; 68
    1974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	8f 83       	std	Y+7, r24	; 0x07
    197e:	98 87       	std	Y+8, r25	; 0x08
    1980:	a9 87       	std	Y+9, r26	; 0x09
    1982:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1984:	6f 81       	ldd	r22, Y+7	; 0x07
    1986:	78 85       	ldd	r23, Y+8	; 0x08
    1988:	89 85       	ldd	r24, Y+9	; 0x09
    198a:	9a 85       	ldd	r25, Y+10	; 0x0a
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e8       	ldi	r20, 0x80	; 128
    1992:	5f e3       	ldi	r21, 0x3F	; 63
    1994:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1998:	88 23       	and	r24, r24
    199a:	2c f4       	brge	.+10     	; 0x19a6 <HLCD_VoidSendCommand+0x17c>
		__ticks = 1;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	9e 83       	std	Y+6, r25	; 0x06
    19a2:	8d 83       	std	Y+5, r24	; 0x05
    19a4:	3f c0       	rjmp	.+126    	; 0x1a24 <HLCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    19a6:	6f 81       	ldd	r22, Y+7	; 0x07
    19a8:	78 85       	ldd	r23, Y+8	; 0x08
    19aa:	89 85       	ldd	r24, Y+9	; 0x09
    19ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	3f ef       	ldi	r19, 0xFF	; 255
    19b2:	4f e7       	ldi	r20, 0x7F	; 127
    19b4:	57 e4       	ldi	r21, 0x47	; 71
    19b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ba:	18 16       	cp	r1, r24
    19bc:	4c f5       	brge	.+82     	; 0x1a10 <HLCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19be:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	40 e2       	ldi	r20, 0x20	; 32
    19cc:	51 e4       	ldi	r21, 0x41	; 65
    19ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	bc 01       	movw	r22, r24
    19d8:	cd 01       	movw	r24, r26
    19da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	9e 83       	std	Y+6, r25	; 0x06
    19e4:	8d 83       	std	Y+5, r24	; 0x05
    19e6:	0f c0       	rjmp	.+30     	; 0x1a06 <HLCD_VoidSendCommand+0x1dc>
    19e8:	88 ec       	ldi	r24, 0xC8	; 200
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	9c 83       	std	Y+4, r25	; 0x04
    19ee:	8b 83       	std	Y+3, r24	; 0x03
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	9c 81       	ldd	r25, Y+4	; 0x04
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	f1 f7       	brne	.-4      	; 0x19f4 <HLCD_VoidSendCommand+0x1ca>
    19f8:	9c 83       	std	Y+4, r25	; 0x04
    19fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
    19fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	9e 83       	std	Y+6, r25	; 0x06
    1a04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a06:	8d 81       	ldd	r24, Y+5	; 0x05
    1a08:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	69 f7       	brne	.-38     	; 0x19e8 <HLCD_VoidSendCommand+0x1be>
    1a0e:	14 c0       	rjmp	.+40     	; 0x1a38 <HLCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a10:	6f 81       	ldd	r22, Y+7	; 0x07
    1a12:	78 85       	ldd	r23, Y+8	; 0x08
    1a14:	89 85       	ldd	r24, Y+9	; 0x09
    1a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	9e 83       	std	Y+6, r25	; 0x06
    1a22:	8d 83       	std	Y+5, r24	; 0x05
    1a24:	8d 81       	ldd	r24, Y+5	; 0x05
    1a26:	9e 81       	ldd	r25, Y+6	; 0x06
    1a28:	9a 83       	std	Y+2, r25	; 0x02
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <HLCD_VoidSendCommand+0x206>
    1a34:	9a 83       	std	Y+2, r25	; 0x02
    1a36:	89 83       	std	Y+1, r24	; 0x01
	/*     delay 2ms  */
	_delay_ms(2);

}
    1a38:	6d 96       	adiw	r28, 0x1d	; 29
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <HLCD_VoidSendString>:


void HLCD_VoidSendString(u8 copy_u8Char[])
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <HLCD_VoidSendString+0x6>
    1a50:	0f 92       	push	r0
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	9b 83       	std	Y+3, r25	; 0x03
    1a58:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1a5a:	19 82       	std	Y+1, r1	; 0x01
    1a5c:	0e c0       	rjmp	.+28     	; 0x1a7a <HLCD_VoidSendString+0x30>
	while(copy_u8Char[i]!='\0')
	{
		HLCD_VoidSendChar(copy_u8Char[i]);
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	9b 81       	ldd	r25, Y+3	; 0x03
    1a68:	fc 01       	movw	r30, r24
    1a6a:	e2 0f       	add	r30, r18
    1a6c:	f3 1f       	adc	r31, r19
    1a6e:	80 81       	ld	r24, Z
    1a70:	0e 94 05 0b 	call	0x160a	; 0x160a <HLCD_VoidSendChar>
		i++;
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	8f 5f       	subi	r24, 0xFF	; 255
    1a78:	89 83       	std	Y+1, r24	; 0x01


void HLCD_VoidSendString(u8 copy_u8Char[])
{
	u8 i=0;
	while(copy_u8Char[i]!='\0')
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	9b 81       	ldd	r25, Y+3	; 0x03
    1a84:	fc 01       	movw	r30, r24
    1a86:	e2 0f       	add	r30, r18
    1a88:	f3 1f       	adc	r31, r19
    1a8a:	80 81       	ld	r24, Z
    1a8c:	88 23       	and	r24, r24
    1a8e:	39 f7       	brne	.-50     	; 0x1a5e <HLCD_VoidSendString+0x14>
	{
		HLCD_VoidSendChar(copy_u8Char[i]);
		i++;
	}
}
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <HLCD_VoidSendNumber>:



void HLCD_VoidSendNumber(u32 copy_u8Char)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <HLCD_VoidSendNumber+0x6>
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <HLCD_VoidSendNumber+0x8>
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	9c 83       	std	Y+4, r25	; 0x04
    1aaa:	8b 83       	std	Y+3, r24	; 0x03
	u32  Local_u8_revers_number = 1;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8Char == 0)
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	39 f5       	brne	.+78     	; 0x1b0a <HLCD_VoidSendNumber+0x6e>
	{
		HLCD_VoidSendChar(copy_u8Char+'0');
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	80 5d       	subi	r24, 0xD0	; 208
    1ac0:	0e 94 05 0b 	call	0x160a	; 0x160a <HLCD_VoidSendChar>
    1ac4:	22 c0       	rjmp	.+68     	; 0x1b0a <HLCD_VoidSendNumber+0x6e>
	}

	while(copy_u8Char > 0)
	{
		Local_u8_revers_number=Local_u8_revers_number*10+copy_u8Char%10;
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aca:	9c 01       	movw	r18, r24
    1acc:	22 0f       	add	r18, r18
    1ace:	33 1f       	adc	r19, r19
    1ad0:	c9 01       	movw	r24, r18
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	f9 01       	movw	r30, r18
    1adc:	e8 0f       	add	r30, r24
    1ade:	f9 1f       	adc	r31, r25
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae4:	2a e0       	ldi	r18, 0x0A	; 10
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	b9 01       	movw	r22, r18
    1aea:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__udivmodhi4>
    1aee:	8e 0f       	add	r24, r30
    1af0:	9f 1f       	adc	r25, r31
    1af2:	9a 83       	std	Y+2, r25	; 0x02
    1af4:	89 83       	std	Y+1, r24	; 0x01
		copy_u8Char=copy_u8Char/10;
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	9c 81       	ldd	r25, Y+4	; 0x04
    1afa:	2a e0       	ldi	r18, 0x0A	; 10
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	b9 01       	movw	r22, r18
    1b00:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__udivmodhi4>
    1b04:	cb 01       	movw	r24, r22
    1b06:	9c 83       	std	Y+4, r25	; 0x04
    1b08:	8b 83       	std	Y+3, r24	; 0x03
	if(copy_u8Char == 0)
	{
		HLCD_VoidSendChar(copy_u8Char+'0');
	}

	while(copy_u8Char > 0)
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	d1 f6       	brne	.-76     	; 0x1ac6 <HLCD_VoidSendNumber+0x2a>
    1b12:	17 c0       	rjmp	.+46     	; 0x1b42 <HLCD_VoidSendNumber+0xa6>
		copy_u8Char=copy_u8Char/10;
	}

	while(Local_u8_revers_number>1)
	{
		copy_u8Char=Local_u8_revers_number % 10;
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	2a e0       	ldi	r18, 0x0A	; 10
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	b9 01       	movw	r22, r18
    1b1e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__udivmodhi4>
    1b22:	9c 83       	std	Y+4, r25	; 0x04
    1b24:	8b 83       	std	Y+3, r24	; 0x03
		Local_u8_revers_number=Local_u8_revers_number/10;
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2a:	2a e0       	ldi	r18, 0x0A	; 10
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	b9 01       	movw	r22, r18
    1b30:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__udivmodhi4>
    1b34:	cb 01       	movw	r24, r22
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	89 83       	std	Y+1, r24	; 0x01
		HLCD_VoidSendChar(copy_u8Char+'0');
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	80 5d       	subi	r24, 0xD0	; 208
    1b3e:	0e 94 05 0b 	call	0x160a	; 0x160a <HLCD_VoidSendChar>
	{
		Local_u8_revers_number=Local_u8_revers_number*10+copy_u8Char%10;
		copy_u8Char=copy_u8Char/10;
	}

	while(Local_u8_revers_number>1)
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	9a 81       	ldd	r25, Y+2	; 0x02
    1b46:	82 30       	cpi	r24, 0x02	; 2
    1b48:	91 05       	cpc	r25, r1
    1b4a:	20 f7       	brcc	.-56     	; 0x1b14 <HLCD_VoidSendNumber+0x78>

	}



}
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <HLCD_VoidGotoXY>:




void HLCD_VoidGotoXY(u8 copy_U8RowPos ,u8 copy_U8ColPos)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <HLCD_VoidGotoXY+0x6>
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_U8RowPos ==0)
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	88 23       	and	r24, r24
    1b6c:	29 f4       	brne	.+10     	; 0x1b78 <HLCD_VoidGotoXY+0x1e>
	{
		HLCD_VoidSendCommand(copy_U8ColPos+128);
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	80 58       	subi	r24, 0x80	; 128
    1b72:	0e 94 15 0c 	call	0x182a	; 0x182a <HLCD_VoidSendCommand>
    1b76:	07 c0       	rjmp	.+14     	; 0x1b86 <HLCD_VoidGotoXY+0x2c>

	}
	else if(copy_U8RowPos ==1)
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	21 f4       	brne	.+8      	; 0x1b86 <HLCD_VoidGotoXY+0x2c>
	{
		HLCD_VoidSendCommand(copy_U8ColPos+128+64);
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	80 54       	subi	r24, 0x40	; 64
    1b82:	0e 94 15 0c 	call	0x182a	; 0x182a <HLCD_VoidSendCommand>

	}

}
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <HLCD_VoidDraw>:




void HLCD_VoidDraw(u8 *copy_u8char, u8 copy_u8Location,u8 copy_u8Xpos ,u8 copy_u8Ypos)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <HLCD_VoidDraw+0x6>
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <HLCD_VoidDraw+0x8>
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <HLCD_VoidDraw+0xa>
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	9b 83       	std	Y+3, r25	; 0x03
    1ba0:	8a 83       	std	Y+2, r24	; 0x02
    1ba2:	6c 83       	std	Y+4, r22	; 0x04
    1ba4:	4d 83       	std	Y+5, r20	; 0x05
    1ba6:	2e 83       	std	Y+6, r18	; 0x06
	u8 i=0;
    1ba8:	19 82       	std	Y+1, r1	; 0x01
	HLCD_VoidSendCommand(64+8*(copy_u8Location));//address 0 of  location 0 of CG_Ram
    1baa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	08 96       	adiw	r24, 0x08	; 8
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	0e 94 15 0c 	call	0x182a	; 0x182a <HLCD_VoidSendCommand>
	for(i=0;i<8;i++)
    1bc2:	19 82       	std	Y+1, r1	; 0x01
    1bc4:	0e c0       	rjmp	.+28     	; 0x1be2 <HLCD_VoidDraw+0x52>
	{
		HLCD_VoidSendChar(copy_u8char[i]);
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	e2 0f       	add	r30, r18
    1bd4:	f3 1f       	adc	r31, r19
    1bd6:	80 81       	ld	r24, Z
    1bd8:	0e 94 05 0b 	call	0x160a	; 0x160a <HLCD_VoidSendChar>

void HLCD_VoidDraw(u8 *copy_u8char, u8 copy_u8Location,u8 copy_u8Xpos ,u8 copy_u8Ypos)
{
	u8 i=0;
	HLCD_VoidSendCommand(64+8*(copy_u8Location));//address 0 of  location 0 of CG_Ram
	for(i=0;i<8;i++)
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	8f 5f       	subi	r24, 0xFF	; 255
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	88 30       	cpi	r24, 0x08	; 8
    1be6:	78 f3       	brcs	.-34     	; 0x1bc6 <HLCD_VoidDraw+0x36>
	{
		HLCD_VoidSendChar(copy_u8char[i]);

	}
	HLCD_VoidSendCommand(0b10000000);//address 0 of DD_Ram
    1be8:	80 e8       	ldi	r24, 0x80	; 128
    1bea:	0e 94 15 0c 	call	0x182a	; 0x182a <HLCD_VoidSendCommand>
	HLCD_VoidGotoXY(copy_u8Xpos,copy_u8Ypos);
    1bee:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf0:	6e 81       	ldd	r22, Y+6	; 0x06
    1bf2:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <HLCD_VoidGotoXY>
	HLCD_VoidSendChar(copy_u8Location); //address location 0 of CG_Ram
    1bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf8:	0e 94 05 0b 	call	0x160a	; 0x160a <HLCD_VoidSendChar>

}
    1bfc:	26 96       	adiw	r28, 0x06	; 6
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <TIMER0_Init>:
static void (*Timer1_OCB_Fptr) (void)=NULL;
static void (*Timer1_ICU_Fptr) (void)=NULL;
/******************************************************************************************/
/*timer 0 functions*/
void TIMER0_Init(Timer0Mode_type mode,Timer0Scaler_type scaler)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <TIMER0_Init+0x6>
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <TIMER0_Init+0x8>
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	6a 83       	std	Y+2, r22	; 0x02
	switch (mode)
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	3c 83       	std	Y+4, r19	; 0x04
    1c26:	2b 83       	std	Y+3, r18	; 0x03
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	91 05       	cpc	r25, r1
    1c30:	21 f1       	breq	.+72     	; 0x1c7a <TIMER0_Init+0x6c>
    1c32:	2b 81       	ldd	r18, Y+3	; 0x03
    1c34:	3c 81       	ldd	r19, Y+4	; 0x04
    1c36:	22 30       	cpi	r18, 0x02	; 2
    1c38:	31 05       	cpc	r19, r1
    1c3a:	2c f4       	brge	.+10     	; 0x1c46 <TIMER0_Init+0x38>
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	61 f0       	breq	.+24     	; 0x1c5c <TIMER0_Init+0x4e>
    1c44:	54 c0       	rjmp	.+168    	; 0x1cee <TIMER0_Init+0xe0>
    1c46:	2b 81       	ldd	r18, Y+3	; 0x03
    1c48:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4a:	22 30       	cpi	r18, 0x02	; 2
    1c4c:	31 05       	cpc	r19, r1
    1c4e:	21 f1       	breq	.+72     	; 0x1c98 <TIMER0_Init+0x8a>
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	83 30       	cpi	r24, 0x03	; 3
    1c56:	91 05       	cpc	r25, r1
    1c58:	71 f1       	breq	.+92     	; 0x1cb6 <TIMER0_Init+0xa8>
    1c5a:	49 c0       	rjmp	.+146    	; 0x1cee <TIMER0_Init+0xe0>
	{
	case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0_REG,TCCR0_WGM00);
    1c5c:	a3 e5       	ldi	r26, 0x53	; 83
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e3 e5       	ldi	r30, 0x53	; 83
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	8f 7b       	andi	r24, 0xBF	; 191
    1c68:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,TCCR0_WGM01);
    1c6a:	a3 e5       	ldi	r26, 0x53	; 83
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e3 e5       	ldi	r30, 0x53	; 83
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	87 7f       	andi	r24, 0xF7	; 247
    1c76:	8c 93       	st	X, r24
    1c78:	3a c0       	rjmp	.+116    	; 0x1cee <TIMER0_Init+0xe0>
		break;
	case TIMER0_PHASECORRECT_MODE:
		SET_BIT(TCCR0_REG,TCCR0_WGM00);
    1c7a:	a3 e5       	ldi	r26, 0x53	; 83
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e3 e5       	ldi	r30, 0x53	; 83
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 64       	ori	r24, 0x40	; 64
    1c86:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,TCCR0_WGM01);
    1c88:	a3 e5       	ldi	r26, 0x53	; 83
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e3 e5       	ldi	r30, 0x53	; 83
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	87 7f       	andi	r24, 0xF7	; 247
    1c94:	8c 93       	st	X, r24
    1c96:	2b c0       	rjmp	.+86     	; 0x1cee <TIMER0_Init+0xe0>
		break;
	case TIMER0_CTC_MODE:
		CLR_BIT(TCCR0_REG,TCCR0_WGM00);
    1c98:	a3 e5       	ldi	r26, 0x53	; 83
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e3 e5       	ldi	r30, 0x53	; 83
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	8f 7b       	andi	r24, 0xBF	; 191
    1ca4:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,TCCR0_WGM01);
    1ca6:	a3 e5       	ldi	r26, 0x53	; 83
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e3 e5       	ldi	r30, 0x53	; 83
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	88 60       	ori	r24, 0x08	; 8
    1cb2:	8c 93       	st	X, r24
    1cb4:	1c c0       	rjmp	.+56     	; 0x1cee <TIMER0_Init+0xe0>
		break;
	case TIMER0_FASTPWM_MODE:
		SET_BIT(TCCR0_REG,TCCR0_WGM00);
    1cb6:	a3 e5       	ldi	r26, 0x53	; 83
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e3 e5       	ldi	r30, 0x53	; 83
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	80 64       	ori	r24, 0x40	; 64
    1cc2:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,TCCR0_WGM01);
    1cc4:	a3 e5       	ldi	r26, 0x53	; 83
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	e3 e5       	ldi	r30, 0x53	; 83
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	88 60       	ori	r24, 0x08	; 8
    1cd0:	8c 93       	st	X, r24
		/*###############################################*/
		// Set On Top Clear On Compare
		SET_BIT(TCCR0_REG, TCCR0_COM01);
    1cd2:	a3 e5       	ldi	r26, 0x53	; 83
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e3 e5       	ldi	r30, 0x53	; 83
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	80 62       	ori	r24, 0x20	; 32
    1cde:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG, TCCR0_COM00);
    1ce0:	a3 e5       	ldi	r26, 0x53	; 83
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e3 e5       	ldi	r30, 0x53	; 83
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	8f 7e       	andi	r24, 0xEF	; 239
    1cec:	8c 93       	st	X, r24
		/*###############################################*/

		break;
	}
	TCCR0_REG&=0XF8;//0b11111000
    1cee:	a3 e5       	ldi	r26, 0x53	; 83
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e3 e5       	ldi	r30, 0x53	; 83
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	88 7f       	andi	r24, 0xF8	; 248
    1cfa:	8c 93       	st	X, r24
	TCCR0_REG|=scaler;
    1cfc:	a3 e5       	ldi	r26, 0x53	; 83
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e3 e5       	ldi	r30, 0x53	; 83
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	90 81       	ld	r25, Z
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	89 2b       	or	r24, r25
    1d0a:	8c 93       	st	X, r24
}
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <TIMER0_OC0Mode>:

void TIMER0_OC0Mode(OC0Mode_type mode)
{
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <TIMER0_OC0Mode+0x6>
    1d20:	0f 92       	push	r0
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	89 83       	std	Y+1, r24	; 0x01
	switch (mode)
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	3b 83       	std	Y+3, r19	; 0x03
    1d30:	2a 83       	std	Y+2, r18	; 0x02
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	9b 81       	ldd	r25, Y+3	; 0x03
    1d36:	81 30       	cpi	r24, 0x01	; 1
    1d38:	91 05       	cpc	r25, r1
    1d3a:	21 f1       	breq	.+72     	; 0x1d84 <TIMER0_OC0Mode+0x6a>
    1d3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d3e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d40:	22 30       	cpi	r18, 0x02	; 2
    1d42:	31 05       	cpc	r19, r1
    1d44:	2c f4       	brge	.+10     	; 0x1d50 <TIMER0_OC0Mode+0x36>
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	61 f0       	breq	.+24     	; 0x1d66 <TIMER0_OC0Mode+0x4c>
    1d4e:	46 c0       	rjmp	.+140    	; 0x1ddc <TIMER0_OC0Mode+0xc2>
    1d50:	2a 81       	ldd	r18, Y+2	; 0x02
    1d52:	3b 81       	ldd	r19, Y+3	; 0x03
    1d54:	22 30       	cpi	r18, 0x02	; 2
    1d56:	31 05       	cpc	r19, r1
    1d58:	21 f1       	breq	.+72     	; 0x1da2 <TIMER0_OC0Mode+0x88>
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5e:	83 30       	cpi	r24, 0x03	; 3
    1d60:	91 05       	cpc	r25, r1
    1d62:	71 f1       	breq	.+92     	; 0x1dc0 <TIMER0_OC0Mode+0xa6>
    1d64:	3b c0       	rjmp	.+118    	; 0x1ddc <TIMER0_OC0Mode+0xc2>
	{
	case OC0_DISCONNECTED:
		CLR_BIT(TCCR0_REG,TCCR0_COM00);
    1d66:	a3 e5       	ldi	r26, 0x53	; 83
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e3 e5       	ldi	r30, 0x53	; 83
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	8f 7e       	andi	r24, 0xEF	; 239
    1d72:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,TCCR0_COM01);
    1d74:	a3 e5       	ldi	r26, 0x53	; 83
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e3 e5       	ldi	r30, 0x53	; 83
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	8f 7d       	andi	r24, 0xDF	; 223
    1d80:	8c 93       	st	X, r24
    1d82:	2c c0       	rjmp	.+88     	; 0x1ddc <TIMER0_OC0Mode+0xc2>
		break;
	case OC0_TOGGLE:
		SET_BIT(TCCR0_REG,TCCR0_COM00);
    1d84:	a3 e5       	ldi	r26, 0x53	; 83
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e3 e5       	ldi	r30, 0x53	; 83
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	80 61       	ori	r24, 0x10	; 16
    1d90:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,TCCR0_COM01);
    1d92:	a3 e5       	ldi	r26, 0x53	; 83
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e3 e5       	ldi	r30, 0x53	; 83
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	8f 7d       	andi	r24, 0xDF	; 223
    1d9e:	8c 93       	st	X, r24
    1da0:	1d c0       	rjmp	.+58     	; 0x1ddc <TIMER0_OC0Mode+0xc2>
		break;
	case OC0_NON_INVERTING:
		CLR_BIT(TCCR0_REG,TCCR0_COM00);
    1da2:	a3 e5       	ldi	r26, 0x53	; 83
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e3 e5       	ldi	r30, 0x53	; 83
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	8f 7e       	andi	r24, 0xEF	; 239
    1dae:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,TCCR0_COM01);
    1db0:	a3 e5       	ldi	r26, 0x53	; 83
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e3 e5       	ldi	r30, 0x53	; 83
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	80 62       	ori	r24, 0x20	; 32
    1dbc:	8c 93       	st	X, r24
    1dbe:	0e c0       	rjmp	.+28     	; 0x1ddc <TIMER0_OC0Mode+0xc2>
		break;
	case OC0_INVERTING:
		SET_BIT(TCCR0_REG,TCCR0_COM00);
    1dc0:	a3 e5       	ldi	r26, 0x53	; 83
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e3 e5       	ldi	r30, 0x53	; 83
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	80 61       	ori	r24, 0x10	; 16
    1dcc:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,TCCR0_COM01);
    1dce:	a3 e5       	ldi	r26, 0x53	; 83
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e3 e5       	ldi	r30, 0x53	; 83
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	80 62       	ori	r24, 0x20	; 32
    1dda:	8c 93       	st	X, r24
		break;
	}
}
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <TIMER0_OV_InterruptEnable>:

void TIMER0_OV_InterruptEnable(void)
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_TOIE0);
    1df0:	a9 e5       	ldi	r26, 0x59	; 89
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e9 e5       	ldi	r30, 0x59	; 89
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	81 60       	ori	r24, 0x01	; 1
    1dfc:	8c 93       	st	X, r24
}
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <TIMER0_OV_InterruptDisable>:
void TIMER0_OV_InterruptDisable(void)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_TOIE0);
    1e0c:	a9 e5       	ldi	r26, 0x59	; 89
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e9 e5       	ldi	r30, 0x59	; 89
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	8e 7f       	andi	r24, 0xFE	; 254
    1e18:	8c 93       	st	X, r24
}
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <TIMER0_OC_InterruptEnable>:
void TIMER0_OC_InterruptEnable(void)
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_OCIE0);
    1e28:	a9 e5       	ldi	r26, 0x59	; 89
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e9 e5       	ldi	r30, 0x59	; 89
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	82 60       	ori	r24, 0x02	; 2
    1e34:	8c 93       	st	X, r24
}
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <TIMER0_OC_InterruptDisable>:
void TIMER0_OC_InterruptDisable(void)
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_OCIE0);
    1e44:	a9 e5       	ldi	r26, 0x59	; 89
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e9 e5       	ldi	r30, 0x59	; 89
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	8d 7f       	andi	r24, 0xFD	; 253
    1e50:	8c 93       	st	X, r24
}
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <TIMER0_Read_TCNT>:
/*********************READ TCNT***************************************/
u8 TIMER0_Read_TCNT(void)
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
	return TCNT0_REG;
    1e60:	e2 e5       	ldi	r30, 0x52	; 82
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
}
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <TIMER0_CTC_SetOCR0>:


/*********************SET OCR0 Value*********************************/
void TIMER0_CTC_SetOCR0(u8 Local_u8OCRValue)
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	0f 92       	push	r0
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u8OCRValue <=255)
	{

		OCR0_REG = Local_u8OCRValue;
    1e78:	ec e5       	ldi	r30, 0x5C	; 92
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	80 83       	st	Z, r24
	}
}
    1e80:	0f 90       	pop	r0
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <Timer0_OVF_SetCallBack>:



/***************************Timer0 callback*************************/
void Timer0_OVF_SetCallBack(void(*LocalFptr)(void))
{
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <Timer0_OVF_SetCallBack+0x6>
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	9a 83       	std	Y+2, r25	; 0x02
    1e94:	89 83       	std	Y+1, r24	; 0x01
	if(LocalFptr != NULL)
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	31 f0       	breq	.+12     	; 0x1eaa <Timer0_OVF_SetCallBack+0x22>
	{
		Timer0_OVF_Fptr = LocalFptr;
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea2:	90 93 81 00 	sts	0x0081, r25
    1ea6:	80 93 80 00 	sts	0x0080, r24
	}
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <Timer0_CTC_SetCallBack>:



void Timer0_CTC_SetCallBack(void(*LocalFptr)(void))
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <Timer0_CTC_SetCallBack+0x6>
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	9a 83       	std	Y+2, r25	; 0x02
    1ec0:	89 83       	std	Y+1, r24	; 0x01
	if(LocalFptr != NULL)
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	31 f0       	breq	.+12     	; 0x1ed6 <Timer0_CTC_SetCallBack+0x22>
	{
		Timer0_CTC_Fptr = LocalFptr;
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ece:	90 93 83 00 	sts	0x0083, r25
    1ed2:	80 93 82 00 	sts	0x0082, r24
	}
}
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <__vector_11>:

/*********************************Timer 0 ISR functions*********************************************/
ISR(TIMER0_OVF_vect)
{
    1ee0:	1f 92       	push	r1
    1ee2:	0f 92       	push	r0
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	0f 92       	push	r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	2f 93       	push	r18
    1eec:	3f 93       	push	r19
    1eee:	4f 93       	push	r20
    1ef0:	5f 93       	push	r21
    1ef2:	6f 93       	push	r22
    1ef4:	7f 93       	push	r23
    1ef6:	8f 93       	push	r24
    1ef8:	9f 93       	push	r25
    1efa:	af 93       	push	r26
    1efc:	bf 93       	push	r27
    1efe:	ef 93       	push	r30
    1f00:	ff 93       	push	r31
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OVF_Fptr != NULL)
    1f0a:	80 91 80 00 	lds	r24, 0x0080
    1f0e:	90 91 81 00 	lds	r25, 0x0081
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	29 f0       	breq	.+10     	; 0x1f20 <__vector_11+0x40>
	{
		Timer0_OVF_Fptr();
    1f16:	e0 91 80 00 	lds	r30, 0x0080
    1f1a:	f0 91 81 00 	lds	r31, 0x0081
    1f1e:	09 95       	icall
	}
}
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	ff 91       	pop	r31
    1f26:	ef 91       	pop	r30
    1f28:	bf 91       	pop	r27
    1f2a:	af 91       	pop	r26
    1f2c:	9f 91       	pop	r25
    1f2e:	8f 91       	pop	r24
    1f30:	7f 91       	pop	r23
    1f32:	6f 91       	pop	r22
    1f34:	5f 91       	pop	r21
    1f36:	4f 91       	pop	r20
    1f38:	3f 91       	pop	r19
    1f3a:	2f 91       	pop	r18
    1f3c:	0f 90       	pop	r0
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	0f 90       	pop	r0
    1f42:	1f 90       	pop	r1
    1f44:	18 95       	reti

00001f46 <__vector_10>:

ISR(TIMER0_OC_vect)
{
    1f46:	1f 92       	push	r1
    1f48:	0f 92       	push	r0
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	0f 92       	push	r0
    1f4e:	11 24       	eor	r1, r1
    1f50:	2f 93       	push	r18
    1f52:	3f 93       	push	r19
    1f54:	4f 93       	push	r20
    1f56:	5f 93       	push	r21
    1f58:	6f 93       	push	r22
    1f5a:	7f 93       	push	r23
    1f5c:	8f 93       	push	r24
    1f5e:	9f 93       	push	r25
    1f60:	af 93       	push	r26
    1f62:	bf 93       	push	r27
    1f64:	ef 93       	push	r30
    1f66:	ff 93       	push	r31
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_CTC_Fptr != NULL)
    1f70:	80 91 82 00 	lds	r24, 0x0082
    1f74:	90 91 83 00 	lds	r25, 0x0083
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	29 f0       	breq	.+10     	; 0x1f86 <__vector_10+0x40>
	{
		Timer0_CTC_Fptr();
    1f7c:	e0 91 82 00 	lds	r30, 0x0082
    1f80:	f0 91 83 00 	lds	r31, 0x0083
    1f84:	09 95       	icall
	}
}
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	ff 91       	pop	r31
    1f8c:	ef 91       	pop	r30
    1f8e:	bf 91       	pop	r27
    1f90:	af 91       	pop	r26
    1f92:	9f 91       	pop	r25
    1f94:	8f 91       	pop	r24
    1f96:	7f 91       	pop	r23
    1f98:	6f 91       	pop	r22
    1f9a:	5f 91       	pop	r21
    1f9c:	4f 91       	pop	r20
    1f9e:	3f 91       	pop	r19
    1fa0:	2f 91       	pop	r18
    1fa2:	0f 90       	pop	r0
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	0f 90       	pop	r0
    1fa8:	1f 90       	pop	r1
    1faa:	18 95       	reti

00001fac <Timer1_Init>:


/***********************************************************************/
/*timer 1 functions*/
void Timer1_Init( Timer1Mode_type mode,Timer1Scaler_type scaler)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <Timer1_Init+0x6>
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <Timer1_Init+0x8>
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	6a 83       	std	Y+2, r22	; 0x02
	switch (mode)
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	3c 83       	std	Y+4, r19	; 0x04
    1fc4:	2b 83       	std	Y+3, r18	; 0x03
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	82 30       	cpi	r24, 0x02	; 2
    1fcc:	91 05       	cpc	r25, r1
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <Timer1_Init+0x26>
    1fd0:	56 c0       	rjmp	.+172    	; 0x207e <Timer1_Init+0xd2>
    1fd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd6:	23 30       	cpi	r18, 0x03	; 3
    1fd8:	31 05       	cpc	r19, r1
    1fda:	54 f4       	brge	.+20     	; 0x1ff0 <Timer1_Init+0x44>
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	99 f0       	breq	.+38     	; 0x200a <Timer1_Init+0x5e>
    1fe4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe8:	21 30       	cpi	r18, 0x01	; 1
    1fea:	31 05       	cpc	r19, r1
    1fec:	59 f1       	breq	.+86     	; 0x2044 <Timer1_Init+0x98>
    1fee:	9d c0       	rjmp	.+314    	; 0x212a <Timer1_Init+0x17e>
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	83 30       	cpi	r24, 0x03	; 3
    1ff6:	91 05       	cpc	r25, r1
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <Timer1_Init+0x50>
    1ffa:	5e c0       	rjmp	.+188    	; 0x20b8 <Timer1_Init+0x10c>
    1ffc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffe:	3c 81       	ldd	r19, Y+4	; 0x04
    2000:	24 30       	cpi	r18, 0x04	; 4
    2002:	31 05       	cpc	r19, r1
    2004:	09 f4       	brne	.+2      	; 0x2008 <Timer1_Init+0x5c>
    2006:	75 c0       	rjmp	.+234    	; 0x20f2 <Timer1_Init+0x146>
    2008:	90 c0       	rjmp	.+288    	; 0x212a <Timer1_Init+0x17e>
	{
	case TIMER1_NORMAL_MODE:
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
    200a:	af e4       	ldi	r26, 0x4F	; 79
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	ef e4       	ldi	r30, 0x4F	; 79
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	8e 7f       	andi	r24, 0xFE	; 254
    2016:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM11);
    2018:	af e4       	ldi	r26, 0x4F	; 79
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	ef e4       	ldi	r30, 0x4F	; 79
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	8d 7f       	andi	r24, 0xFD	; 253
    2024:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,TCCR1B_WGM12);
    2026:	ae e4       	ldi	r26, 0x4E	; 78
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	ee e4       	ldi	r30, 0x4E	; 78
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	87 7f       	andi	r24, 0xF7	; 247
    2032:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,TCCR1B_WGM13);
    2034:	ae e4       	ldi	r26, 0x4E	; 78
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	ee e4       	ldi	r30, 0x4E	; 78
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	8f 7e       	andi	r24, 0xEF	; 239
    2040:	8c 93       	st	X, r24
    2042:	73 c0       	rjmp	.+230    	; 0x212a <Timer1_Init+0x17e>
		break;
	case TIMER1_CTC_ICR_TOP_MODE:
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
    2044:	af e4       	ldi	r26, 0x4F	; 79
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	ef e4       	ldi	r30, 0x4F	; 79
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	8e 7f       	andi	r24, 0xFE	; 254
    2050:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM11);
    2052:	af e4       	ldi	r26, 0x4F	; 79
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	ef e4       	ldi	r30, 0x4F	; 79
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	8d 7f       	andi	r24, 0xFD	; 253
    205e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
    2060:	ae e4       	ldi	r26, 0x4E	; 78
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	ee e4       	ldi	r30, 0x4E	; 78
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	88 60       	ori	r24, 0x08	; 8
    206c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
    206e:	ae e4       	ldi	r26, 0x4E	; 78
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	ee e4       	ldi	r30, 0x4E	; 78
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	80 61       	ori	r24, 0x10	; 16
    207a:	8c 93       	st	X, r24
    207c:	56 c0       	rjmp	.+172    	; 0x212a <Timer1_Init+0x17e>
		break;

	case TIMER1_CTC_OCRA_TOP_MODE:
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
    207e:	af e4       	ldi	r26, 0x4F	; 79
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	ef e4       	ldi	r30, 0x4F	; 79
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	8e 7f       	andi	r24, 0xFE	; 254
    208a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM11);
    208c:	af e4       	ldi	r26, 0x4F	; 79
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	ef e4       	ldi	r30, 0x4F	; 79
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	8d 7f       	andi	r24, 0xFD	; 253
    2098:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
    209a:	ae e4       	ldi	r26, 0x4E	; 78
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	ee e4       	ldi	r30, 0x4E	; 78
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	88 60       	ori	r24, 0x08	; 8
    20a6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,TCCR1B_WGM13);
    20a8:	ae e4       	ldi	r26, 0x4E	; 78
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	ee e4       	ldi	r30, 0x4E	; 78
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	8f 7e       	andi	r24, 0xEF	; 239
    20b4:	8c 93       	st	X, r24
    20b6:	39 c0       	rjmp	.+114    	; 0x212a <Timer1_Init+0x17e>
		break;

	case TIMER1_FASTPWM_ICR_TOP_MODE:
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
    20b8:	af e4       	ldi	r26, 0x4F	; 79
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	ef e4       	ldi	r30, 0x4F	; 79
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	8e 7f       	andi	r24, 0xFE	; 254
    20c4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
    20c6:	af e4       	ldi	r26, 0x4F	; 79
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	ef e4       	ldi	r30, 0x4F	; 79
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	82 60       	ori	r24, 0x02	; 2
    20d2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
    20d4:	ae e4       	ldi	r26, 0x4E	; 78
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	ee e4       	ldi	r30, 0x4E	; 78
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	88 60       	ori	r24, 0x08	; 8
    20e0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
    20e2:	ae e4       	ldi	r26, 0x4E	; 78
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	ee e4       	ldi	r30, 0x4E	; 78
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	80 61       	ori	r24, 0x10	; 16
    20ee:	8c 93       	st	X, r24
    20f0:	1c c0       	rjmp	.+56     	; 0x212a <Timer1_Init+0x17e>
		break;

	case TIMER1_FASTPWM_OCRA_TOP_MODE:
		SET_BIT(TCCR1A_REG,TCCR1A_WGM10);
    20f2:	af e4       	ldi	r26, 0x4F	; 79
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	ef e4       	ldi	r30, 0x4F	; 79
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	81 60       	ori	r24, 0x01	; 1
    20fe:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
    2100:	af e4       	ldi	r26, 0x4F	; 79
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	ef e4       	ldi	r30, 0x4F	; 79
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	82 60       	ori	r24, 0x02	; 2
    210c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
    210e:	ae e4       	ldi	r26, 0x4E	; 78
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	ee e4       	ldi	r30, 0x4E	; 78
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	88 60       	ori	r24, 0x08	; 8
    211a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
    211c:	ae e4       	ldi	r26, 0x4E	; 78
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	ee e4       	ldi	r30, 0x4E	; 78
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	80 61       	ori	r24, 0x10	; 16
    2128:	8c 93       	st	X, r24
		break;
	}

	TCCR1B_REG&=0XF8;
    212a:	ae e4       	ldi	r26, 0x4E	; 78
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	ee e4       	ldi	r30, 0x4E	; 78
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	88 7f       	andi	r24, 0xF8	; 248
    2136:	8c 93       	st	X, r24
	TCCR1B_REG|=scaler;
    2138:	ae e4       	ldi	r26, 0x4E	; 78
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	ee e4       	ldi	r30, 0x4E	; 78
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	90 81       	ld	r25, Z
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	89 2b       	or	r24, r25
    2146:	8c 93       	st	X, r24

}
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <Timer1_OCRA1Mode>:
void Timer1_OCRA1Mode(OC1A_Mode_type oc1a_mode)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	00 d0       	rcall	.+0      	; 0x215c <Timer1_OCRA1Mode+0x6>
    215c:	0f 92       	push	r0
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	89 83       	std	Y+1, r24	; 0x01
	switch (oc1a_mode)
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	3b 83       	std	Y+3, r19	; 0x03
    216c:	2a 83       	std	Y+2, r18	; 0x02
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	9b 81       	ldd	r25, Y+3	; 0x03
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	91 05       	cpc	r25, r1
    2176:	21 f1       	breq	.+72     	; 0x21c0 <Timer1_OCRA1Mode+0x6a>
    2178:	2a 81       	ldd	r18, Y+2	; 0x02
    217a:	3b 81       	ldd	r19, Y+3	; 0x03
    217c:	22 30       	cpi	r18, 0x02	; 2
    217e:	31 05       	cpc	r19, r1
    2180:	2c f4       	brge	.+10     	; 0x218c <Timer1_OCRA1Mode+0x36>
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	9b 81       	ldd	r25, Y+3	; 0x03
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	61 f0       	breq	.+24     	; 0x21a2 <Timer1_OCRA1Mode+0x4c>
    218a:	46 c0       	rjmp	.+140    	; 0x2218 <Timer1_OCRA1Mode+0xc2>
    218c:	2a 81       	ldd	r18, Y+2	; 0x02
    218e:	3b 81       	ldd	r19, Y+3	; 0x03
    2190:	22 30       	cpi	r18, 0x02	; 2
    2192:	31 05       	cpc	r19, r1
    2194:	21 f1       	breq	.+72     	; 0x21de <Timer1_OCRA1Mode+0x88>
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	9b 81       	ldd	r25, Y+3	; 0x03
    219a:	83 30       	cpi	r24, 0x03	; 3
    219c:	91 05       	cpc	r25, r1
    219e:	71 f1       	breq	.+92     	; 0x21fc <Timer1_OCRA1Mode+0xa6>
    21a0:	3b c0       	rjmp	.+118    	; 0x2218 <Timer1_OCRA1Mode+0xc2>
	{
	case OCRA_DISCONNECTED:
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
    21a2:	af e4       	ldi	r26, 0x4F	; 79
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	ef e4       	ldi	r30, 0x4F	; 79
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	8f 7b       	andi	r24, 0xBF	; 191
    21ae:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    21b0:	af e4       	ldi	r26, 0x4F	; 79
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	ef e4       	ldi	r30, 0x4F	; 79
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	8f 77       	andi	r24, 0x7F	; 127
    21bc:	8c 93       	st	X, r24
    21be:	2c c0       	rjmp	.+88     	; 0x2218 <Timer1_OCRA1Mode+0xc2>
		break;
	case OCRA_TOGGLE:
		SET_BIT(TCCR1A_REG,TCCR1A_COM1A0);
    21c0:	af e4       	ldi	r26, 0x4F	; 79
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	ef e4       	ldi	r30, 0x4F	; 79
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	80 64       	ori	r24, 0x40	; 64
    21cc:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    21ce:	af e4       	ldi	r26, 0x4F	; 79
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	ef e4       	ldi	r30, 0x4F	; 79
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	8f 77       	andi	r24, 0x7F	; 127
    21da:	8c 93       	st	X, r24
    21dc:	1d c0       	rjmp	.+58     	; 0x2218 <Timer1_OCRA1Mode+0xc2>
		break;
	case OCRA_NON_INVERTING:
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
    21de:	af e4       	ldi	r26, 0x4F	; 79
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	ef e4       	ldi	r30, 0x4F	; 79
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	8f 7b       	andi	r24, 0xBF	; 191
    21ea:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    21ec:	af e4       	ldi	r26, 0x4F	; 79
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	ef e4       	ldi	r30, 0x4F	; 79
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	80 68       	ori	r24, 0x80	; 128
    21f8:	8c 93       	st	X, r24
    21fa:	0e c0       	rjmp	.+28     	; 0x2218 <Timer1_OCRA1Mode+0xc2>
		break;
	case OCRA_INVERTING:
		SET_BIT(TCCR1A_REG,TCCR1A_COM1A0);
    21fc:	af e4       	ldi	r26, 0x4F	; 79
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	ef e4       	ldi	r30, 0x4F	; 79
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	80 64       	ori	r24, 0x40	; 64
    2208:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    220a:	af e4       	ldi	r26, 0x4F	; 79
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	ef e4       	ldi	r30, 0x4F	; 79
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	80 68       	ori	r24, 0x80	; 128
    2216:	8c 93       	st	X, r24
		break;
	}
}
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <Timer1_OCRB1Mode>:
void Timer1_OCRB1Mode(OC1B_Mode_type oc1b_mode)
{
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	00 d0       	rcall	.+0      	; 0x222a <Timer1_OCRB1Mode+0x6>
    222a:	0f 92       	push	r0
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	89 83       	std	Y+1, r24	; 0x01
	switch (oc1b_mode)
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	3b 83       	std	Y+3, r19	; 0x03
    223a:	2a 83       	std	Y+2, r18	; 0x02
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	9b 81       	ldd	r25, Y+3	; 0x03
    2240:	81 30       	cpi	r24, 0x01	; 1
    2242:	91 05       	cpc	r25, r1
    2244:	21 f1       	breq	.+72     	; 0x228e <Timer1_OCRB1Mode+0x6a>
    2246:	2a 81       	ldd	r18, Y+2	; 0x02
    2248:	3b 81       	ldd	r19, Y+3	; 0x03
    224a:	22 30       	cpi	r18, 0x02	; 2
    224c:	31 05       	cpc	r19, r1
    224e:	2c f4       	brge	.+10     	; 0x225a <Timer1_OCRB1Mode+0x36>
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	9b 81       	ldd	r25, Y+3	; 0x03
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	61 f0       	breq	.+24     	; 0x2270 <Timer1_OCRB1Mode+0x4c>
    2258:	46 c0       	rjmp	.+140    	; 0x22e6 <Timer1_OCRB1Mode+0xc2>
    225a:	2a 81       	ldd	r18, Y+2	; 0x02
    225c:	3b 81       	ldd	r19, Y+3	; 0x03
    225e:	22 30       	cpi	r18, 0x02	; 2
    2260:	31 05       	cpc	r19, r1
    2262:	21 f1       	breq	.+72     	; 0x22ac <Timer1_OCRB1Mode+0x88>
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	9b 81       	ldd	r25, Y+3	; 0x03
    2268:	83 30       	cpi	r24, 0x03	; 3
    226a:	91 05       	cpc	r25, r1
    226c:	71 f1       	breq	.+92     	; 0x22ca <Timer1_OCRB1Mode+0xa6>
    226e:	3b c0       	rjmp	.+118    	; 0x22e6 <Timer1_OCRB1Mode+0xc2>
	{
	case OCRB_DISCONNECTED:
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1B0);
    2270:	af e4       	ldi	r26, 0x4F	; 79
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	ef e4       	ldi	r30, 0x4F	; 79
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	8f 7e       	andi	r24, 0xEF	; 239
    227c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1B1);
    227e:	af e4       	ldi	r26, 0x4F	; 79
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	ef e4       	ldi	r30, 0x4F	; 79
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	8f 7d       	andi	r24, 0xDF	; 223
    228a:	8c 93       	st	X, r24
    228c:	2c c0       	rjmp	.+88     	; 0x22e6 <Timer1_OCRB1Mode+0xc2>
		break;
	case OCRB_TOGGLE:
		SET_BIT(TCCR1A_REG,TCCR1A_COM1B0);
    228e:	af e4       	ldi	r26, 0x4F	; 79
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	ef e4       	ldi	r30, 0x4F	; 79
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	80 61       	ori	r24, 0x10	; 16
    229a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1B1);
    229c:	af e4       	ldi	r26, 0x4F	; 79
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	ef e4       	ldi	r30, 0x4F	; 79
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	8f 7d       	andi	r24, 0xDF	; 223
    22a8:	8c 93       	st	X, r24
    22aa:	1d c0       	rjmp	.+58     	; 0x22e6 <Timer1_OCRB1Mode+0xc2>
		break;
	case OCRB_NON_INVERTING:
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1B0);
    22ac:	af e4       	ldi	r26, 0x4F	; 79
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	ef e4       	ldi	r30, 0x4F	; 79
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	8f 7e       	andi	r24, 0xEF	; 239
    22b8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_COM1B1);
    22ba:	af e4       	ldi	r26, 0x4F	; 79
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	ef e4       	ldi	r30, 0x4F	; 79
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	80 62       	ori	r24, 0x20	; 32
    22c6:	8c 93       	st	X, r24
    22c8:	0e c0       	rjmp	.+28     	; 0x22e6 <Timer1_OCRB1Mode+0xc2>
		break;
	case OCRB_INVERTING:
		SET_BIT(TCCR1A_REG,TCCR1A_COM1B0);
    22ca:	af e4       	ldi	r26, 0x4F	; 79
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	ef e4       	ldi	r30, 0x4F	; 79
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	80 61       	ori	r24, 0x10	; 16
    22d6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_COM1B1);
    22d8:	af e4       	ldi	r26, 0x4F	; 79
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	ef e4       	ldi	r30, 0x4F	; 79
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	80 62       	ori	r24, 0x20	; 32
    22e4:	8c 93       	st	X, r24
		break;
	}
}
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <Timer1_InputCaptureEdge>:
void Timer1_InputCaptureEdge(ICU_Edge_type edge)
{
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	0f 92       	push	r0
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	89 83       	std	Y+1, r24	; 0x01
	if(edge==RISING)
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	88 23       	and	r24, r24
    2302:	41 f4       	brne	.+16     	; 0x2314 <Timer1_InputCaptureEdge+0x22>
		SET_BIT(TCCR1B_REG,TCCR1B_ICES1);
    2304:	ae e4       	ldi	r26, 0x4E	; 78
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	ee e4       	ldi	r30, 0x4E	; 78
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	80 64       	ori	r24, 0x40	; 64
    2310:	8c 93       	st	X, r24
    2312:	0a c0       	rjmp	.+20     	; 0x2328 <Timer1_InputCaptureEdge+0x36>

	else if(edge==FALLING)
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	39 f4       	brne	.+14     	; 0x2328 <Timer1_InputCaptureEdge+0x36>
		CLR_BIT(TCCR1B_REG,TCCR1B_ICES1);
    231a:	ae e4       	ldi	r26, 0x4E	; 78
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	ee e4       	ldi	r30, 0x4E	; 78
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	8f 7b       	andi	r24, 0xBF	; 191
    2326:	8c 93       	st	X, r24
}
    2328:	0f 90       	pop	r0
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <Timer1_ClearInputCaptureValue>:

void Timer1_ClearInputCaptureValue(void)
{
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
	ICR1_REG = 0;
    2338:	e6 e4       	ldi	r30, 0x46	; 70
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	11 82       	std	Z+1, r1	; 0x01
    233e:	10 82       	st	Z, r1
}
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <Timer1_ReadInputCaptureValue>:
u8 Timer1_ReadInputCaptureValue(void)
{
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG;
    234e:	e6 e4       	ldi	r30, 0x46	; 70
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	91 81       	ldd	r25, Z+1	; 0x01
}
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <Timer1_ICU_InterruptEnable>:


/****************************Timer 1 Interrupt functions**************************************/

void Timer1_ICU_InterruptEnable(void)
{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_TICIE1);
    2364:	a9 e5       	ldi	r26, 0x59	; 89
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e9 e5       	ldi	r30, 0x59	; 89
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	80 62       	ori	r24, 0x20	; 32
    2370:	8c 93       	st	X, r24
}
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	08 95       	ret

00002378 <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_TICIE1);
    2380:	a9 e5       	ldi	r26, 0x59	; 89
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e9 e5       	ldi	r30, 0x59	; 89
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	8f 7d       	andi	r24, 0xDF	; 223
    238c:	8c 93       	st	X, r24
}
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <Timer1_OVF_InterruptEnable>:
void Timer1_OVF_InterruptEnable(void)
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_TOIE1);
    239c:	a9 e5       	ldi	r26, 0x59	; 89
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	e9 e5       	ldi	r30, 0x59	; 89
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	84 60       	ori	r24, 0x04	; 4
    23a8:	8c 93       	st	X, r24
}
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_TOIE1);
    23b8:	a9 e5       	ldi	r26, 0x59	; 89
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	e9 e5       	ldi	r30, 0x59	; 89
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	8b 7f       	andi	r24, 0xFB	; 251
    23c4:	8c 93       	st	X, r24
}
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_OCIE1A);
    23d4:	a9 e5       	ldi	r26, 0x59	; 89
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e9 e5       	ldi	r30, 0x59	; 89
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	80 61       	ori	r24, 0x10	; 16
    23e0:	8c 93       	st	X, r24
}
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_OCIE1A);
    23f0:	a9 e5       	ldi	r26, 0x59	; 89
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	e9 e5       	ldi	r30, 0x59	; 89
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	8f 7e       	andi	r24, 0xEF	; 239
    23fc:	8c 93       	st	X, r24
}
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_OCIE1B);
    240c:	a9 e5       	ldi	r26, 0x59	; 89
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	e9 e5       	ldi	r30, 0x59	; 89
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	88 60       	ori	r24, 0x08	; 8
    2418:	8c 93       	st	X, r24
}
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	08 95       	ret

00002420 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_OCIE1B);
    2428:	a9 e5       	ldi	r26, 0x59	; 89
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	e9 e5       	ldi	r30, 0x59	; 89
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	87 7f       	andi	r24, 0xF7	; 247
    2434:	8c 93       	st	X, r24
}
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret

0000243c <TIMER1_PreloadOCR1B>:

void TIMER1_PreloadOCR1B(u16 preload_value)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	00 d0       	rcall	.+0      	; 0x2442 <TIMER1_PreloadOCR1B+0x6>
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	9a 83       	std	Y+2, r25	; 0x02
    2448:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_REG = preload_value;
    244a:	e8 e4       	ldi	r30, 0x48	; 72
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	9a 81       	ldd	r25, Y+2	; 0x02
    2452:	91 83       	std	Z+1, r25	; 0x01
    2454:	80 83       	st	Z, r24
}
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <TIMER1_PreloadOCR1A>:
void TIMER1_PreloadOCR1A(u16 preload_value)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	00 d0       	rcall	.+0      	; 0x2466 <TIMER1_PreloadOCR1A+0x6>
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	9a 83       	std	Y+2, r25	; 0x02
    246c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_REG = preload_value;
    246e:	ea e4       	ldi	r30, 0x4A	; 74
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	9a 81       	ldd	r25, Y+2	; 0x02
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	80 83       	st	Z, r24
}
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <Timer1_OVF_SetCallBack>:


/*********************************Timer 1 Call Back functions*****************************************/

void Timer1_OVF_SetCallBack(void(*LocalFptr)(void))
{
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	00 d0       	rcall	.+0      	; 0x248a <Timer1_OVF_SetCallBack+0x6>
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	9a 83       	std	Y+2, r25	; 0x02
    2490:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OVF_Fptr=LocalFptr;
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	9a 81       	ldd	r25, Y+2	; 0x02
    2496:	90 93 85 00 	sts	0x0085, r25
    249a:	80 93 84 00 	sts	0x0084, r24
}
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	08 95       	ret

000024a8 <Timer1_OCA_SetCallBack>:
void Timer1_OCA_SetCallBack(void(*LocalFptr)(void))
{
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <Timer1_OCA_SetCallBack+0x6>
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	9a 83       	std	Y+2, r25	; 0x02
    24b4:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCA_Fptr=LocalFptr;
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	90 93 87 00 	sts	0x0087, r25
    24be:	80 93 86 00 	sts	0x0086, r24
}
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <Timer1_OCB_SetCallBack>:
void Timer1_OCB_SetCallBack(void(*LocalFptr)(void))
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <Timer1_OCB_SetCallBack+0x6>
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	9a 83       	std	Y+2, r25	; 0x02
    24d8:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCB_Fptr=LocalFptr;
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	9a 81       	ldd	r25, Y+2	; 0x02
    24de:	90 93 89 00 	sts	0x0089, r25
    24e2:	80 93 88 00 	sts	0x0088, r24
}
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <Timer1_ICU_SetCallBack>:
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <Timer1_ICU_SetCallBack+0x6>
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	9a 83       	std	Y+2, r25	; 0x02
    24fc:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_Fptr=LocalFptr;
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	9a 81       	ldd	r25, Y+2	; 0x02
    2502:	90 93 8b 00 	sts	0x008B, r25
    2506:	80 93 8a 00 	sts	0x008A, r24
}
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	08 95       	ret

00002514 <__vector_9>:

/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER1_OVF_vect)
{
    2514:	1f 92       	push	r1
    2516:	0f 92       	push	r0
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	0f 92       	push	r0
    251c:	11 24       	eor	r1, r1
    251e:	2f 93       	push	r18
    2520:	3f 93       	push	r19
    2522:	4f 93       	push	r20
    2524:	5f 93       	push	r21
    2526:	6f 93       	push	r22
    2528:	7f 93       	push	r23
    252a:	8f 93       	push	r24
    252c:	9f 93       	push	r25
    252e:	af 93       	push	r26
    2530:	bf 93       	push	r27
    2532:	ef 93       	push	r30
    2534:	ff 93       	push	r31
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OVF_Fptr!=NULL)
    253e:	80 91 84 00 	lds	r24, 0x0084
    2542:	90 91 85 00 	lds	r25, 0x0085
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	29 f0       	breq	.+10     	; 0x2554 <__vector_9+0x40>
	{
		Timer1_OVF_Fptr();
    254a:	e0 91 84 00 	lds	r30, 0x0084
    254e:	f0 91 85 00 	lds	r31, 0x0085
    2552:	09 95       	icall
	}
}
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	ff 91       	pop	r31
    255a:	ef 91       	pop	r30
    255c:	bf 91       	pop	r27
    255e:	af 91       	pop	r26
    2560:	9f 91       	pop	r25
    2562:	8f 91       	pop	r24
    2564:	7f 91       	pop	r23
    2566:	6f 91       	pop	r22
    2568:	5f 91       	pop	r21
    256a:	4f 91       	pop	r20
    256c:	3f 91       	pop	r19
    256e:	2f 91       	pop	r18
    2570:	0f 90       	pop	r0
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	0f 90       	pop	r0
    2576:	1f 90       	pop	r1
    2578:	18 95       	reti

0000257a <__vector_7>:
ISR(TIMER1_OCA_vect)
{
    257a:	1f 92       	push	r1
    257c:	0f 92       	push	r0
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	0f 92       	push	r0
    2582:	11 24       	eor	r1, r1
    2584:	2f 93       	push	r18
    2586:	3f 93       	push	r19
    2588:	4f 93       	push	r20
    258a:	5f 93       	push	r21
    258c:	6f 93       	push	r22
    258e:	7f 93       	push	r23
    2590:	8f 93       	push	r24
    2592:	9f 93       	push	r25
    2594:	af 93       	push	r26
    2596:	bf 93       	push	r27
    2598:	ef 93       	push	r30
    259a:	ff 93       	push	r31
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCA_Fptr!=NULL)
    25a4:	80 91 86 00 	lds	r24, 0x0086
    25a8:	90 91 87 00 	lds	r25, 0x0087
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	29 f0       	breq	.+10     	; 0x25ba <__vector_7+0x40>
	{
		Timer1_OCA_Fptr();
    25b0:	e0 91 86 00 	lds	r30, 0x0086
    25b4:	f0 91 87 00 	lds	r31, 0x0087
    25b8:	09 95       	icall
	}
}
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	ff 91       	pop	r31
    25c0:	ef 91       	pop	r30
    25c2:	bf 91       	pop	r27
    25c4:	af 91       	pop	r26
    25c6:	9f 91       	pop	r25
    25c8:	8f 91       	pop	r24
    25ca:	7f 91       	pop	r23
    25cc:	6f 91       	pop	r22
    25ce:	5f 91       	pop	r21
    25d0:	4f 91       	pop	r20
    25d2:	3f 91       	pop	r19
    25d4:	2f 91       	pop	r18
    25d6:	0f 90       	pop	r0
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	0f 90       	pop	r0
    25dc:	1f 90       	pop	r1
    25de:	18 95       	reti

000025e0 <__vector_8>:
ISR(TIMER1_OCB_vect)
{
    25e0:	1f 92       	push	r1
    25e2:	0f 92       	push	r0
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	0f 92       	push	r0
    25e8:	11 24       	eor	r1, r1
    25ea:	2f 93       	push	r18
    25ec:	3f 93       	push	r19
    25ee:	4f 93       	push	r20
    25f0:	5f 93       	push	r21
    25f2:	6f 93       	push	r22
    25f4:	7f 93       	push	r23
    25f6:	8f 93       	push	r24
    25f8:	9f 93       	push	r25
    25fa:	af 93       	push	r26
    25fc:	bf 93       	push	r27
    25fe:	ef 93       	push	r30
    2600:	ff 93       	push	r31
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCB_Fptr!=NULL)
    260a:	80 91 88 00 	lds	r24, 0x0088
    260e:	90 91 89 00 	lds	r25, 0x0089
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	29 f0       	breq	.+10     	; 0x2620 <__vector_8+0x40>
	{
		Timer1_OCB_Fptr();
    2616:	e0 91 88 00 	lds	r30, 0x0088
    261a:	f0 91 89 00 	lds	r31, 0x0089
    261e:	09 95       	icall
	}
}
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	ff 91       	pop	r31
    2626:	ef 91       	pop	r30
    2628:	bf 91       	pop	r27
    262a:	af 91       	pop	r26
    262c:	9f 91       	pop	r25
    262e:	8f 91       	pop	r24
    2630:	7f 91       	pop	r23
    2632:	6f 91       	pop	r22
    2634:	5f 91       	pop	r21
    2636:	4f 91       	pop	r20
    2638:	3f 91       	pop	r19
    263a:	2f 91       	pop	r18
    263c:	0f 90       	pop	r0
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	0f 90       	pop	r0
    2642:	1f 90       	pop	r1
    2644:	18 95       	reti

00002646 <__vector_6>:
ISR(TIMER1_ICU_vect)
{
    2646:	1f 92       	push	r1
    2648:	0f 92       	push	r0
    264a:	0f b6       	in	r0, 0x3f	; 63
    264c:	0f 92       	push	r0
    264e:	11 24       	eor	r1, r1
    2650:	2f 93       	push	r18
    2652:	3f 93       	push	r19
    2654:	4f 93       	push	r20
    2656:	5f 93       	push	r21
    2658:	6f 93       	push	r22
    265a:	7f 93       	push	r23
    265c:	8f 93       	push	r24
    265e:	9f 93       	push	r25
    2660:	af 93       	push	r26
    2662:	bf 93       	push	r27
    2664:	ef 93       	push	r30
    2666:	ff 93       	push	r31
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_ICU_Fptr!=NULL)
    2670:	80 91 8a 00 	lds	r24, 0x008A
    2674:	90 91 8b 00 	lds	r25, 0x008B
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	29 f0       	breq	.+10     	; 0x2686 <__vector_6+0x40>
	{
		Timer1_ICU_Fptr();
    267c:	e0 91 8a 00 	lds	r30, 0x008A
    2680:	f0 91 8b 00 	lds	r31, 0x008B
    2684:	09 95       	icall
	}
}
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	ff 91       	pop	r31
    268c:	ef 91       	pop	r30
    268e:	bf 91       	pop	r27
    2690:	af 91       	pop	r26
    2692:	9f 91       	pop	r25
    2694:	8f 91       	pop	r24
    2696:	7f 91       	pop	r23
    2698:	6f 91       	pop	r22
    269a:	5f 91       	pop	r21
    269c:	4f 91       	pop	r20
    269e:	3f 91       	pop	r19
    26a0:	2f 91       	pop	r18
    26a2:	0f 90       	pop	r0
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	0f 90       	pop	r0
    26a8:	1f 90       	pop	r1
    26aa:	18 95       	reti

000026ac <App>:

volatile u8 R1=0, R2=0, R3=0, OnTick=0, PeriodTime=0;
volatile u8 test=0, TC=0;

void App (void)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62

	volatile static u8 counter =0;
	counter ++;
    26b4:	80 91 93 00 	lds	r24, 0x0093
    26b8:	8f 5f       	subi	r24, 0xFF	; 255
    26ba:	80 93 93 00 	sts	0x0093, r24
	if(counter == 1)
    26be:	80 91 93 00 	lds	r24, 0x0093
    26c2:	81 30       	cpi	r24, 0x01	; 1
    26c4:	29 f4       	brne	.+10     	; 0x26d0 <App+0x24>
	{
		R1=Timer1_ReadInputCaptureValue();
    26c6:	0e 94 a3 11 	call	0x2346	; 0x2346 <Timer1_ReadInputCaptureValue>
    26ca:	80 93 8c 00 	sts	0x008C, r24
    26ce:	2a c0       	rjmp	.+84     	; 0x2724 <App+0x78>
//		R1= 0;

	}
	else if(counter ==2)
    26d0:	80 91 93 00 	lds	r24, 0x0093
    26d4:	82 30       	cpi	r24, 0x02	; 2
    26d6:	91 f4       	brne	.+36     	; 0x26fc <App+0x50>
	{
		R2 = Timer1_ReadInputCaptureValue();
    26d8:	0e 94 a3 11 	call	0x2346	; 0x2346 <Timer1_ReadInputCaptureValue>
    26dc:	80 93 8d 00 	sts	0x008D, r24
		Timer1_InputCaptureEdge(FALLING);
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	0e 94 79 11 	call	0x22f2	; 0x22f2 <Timer1_InputCaptureEdge>
		PeriodTime =R2-R1-1;
    26e6:	90 91 8d 00 	lds	r25, 0x008D
    26ea:	80 91 8c 00 	lds	r24, 0x008C
    26ee:	29 2f       	mov	r18, r25
    26f0:	28 1b       	sub	r18, r24
    26f2:	82 2f       	mov	r24, r18
    26f4:	81 50       	subi	r24, 0x01	; 1
    26f6:	80 93 90 00 	sts	0x0090, r24
    26fa:	14 c0       	rjmp	.+40     	; 0x2724 <App+0x78>
	}

	else if(counter==3)
    26fc:	80 91 93 00 	lds	r24, 0x0093
    2700:	83 30       	cpi	r24, 0x03	; 3
    2702:	81 f4       	brne	.+32     	; 0x2724 <App+0x78>
	{
		R3 = Timer1_ReadInputCaptureValue();
    2704:	0e 94 a3 11 	call	0x2346	; 0x2346 <Timer1_ReadInputCaptureValue>
    2708:	80 93 8e 00 	sts	0x008E, r24
		OnTick=R3-R2-1;
    270c:	90 91 8e 00 	lds	r25, 0x008E
    2710:	80 91 8d 00 	lds	r24, 0x008D
    2714:	29 2f       	mov	r18, r25
    2716:	28 1b       	sub	r18, r24
    2718:	82 2f       	mov	r24, r18
    271a:	81 50       	subi	r24, 0x01	; 1
    271c:	80 93 8f 00 	sts	0x008F, r24
		Timer1_ICU_InterruptDisable();
    2720:	0e 94 bc 11 	call	0x2378	; 0x2378 <Timer1_ICU_InterruptDisable>

	}
}
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <main>:

void main(void)
{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62


	DIO_u8SetPinDirection(DIO_u8_PORTD,DIO_u8_PIN0,DIO_u8_PIN_OUTPUT);
    2732:	83 e0       	ldi	r24, 0x03	; 3
    2734:	60 e0       	ldi	r22, 0x00	; 0
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_PIN_OUTPUT);
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	61 e0       	ldi	r22, 0x01	; 1
    2740:	41 e0       	ldi	r20, 0x01	; 1
    2742:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_PIN_OUTPUT);
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	63 e0       	ldi	r22, 0x03	; 3
    274a:	41 e0       	ldi	r20, 0x01	; 1
    274c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8_PORTD,DIO_u8_PIN6,DIO_u8_PIN_INPUT);
    2750:	83 e0       	ldi	r24, 0x03	; 3
    2752:	66 e0       	ldi	r22, 0x06	; 6
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>

	HLCD_VoidInit();
    275a:	0e 94 0b 09 	call	0x1216	; 0x1216 <HLCD_VoidInit>


	TIMER0_CTC_SetOCR0(200);
    275e:	88 ec       	ldi	r24, 0xC8	; 200
    2760:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <TIMER0_CTC_SetOCR0>
	TIMER0_Init(TIMER0_FASTPWM_MODE, TIMER0_SCALER_8);
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	62 e0       	ldi	r22, 0x02	; 2
    2768:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <TIMER0_Init>
	Timer1_Init(TIMER1_NORMAL_MODE,TIMER1_SCALER_8);
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	62 e0       	ldi	r22, 0x02	; 2
    2770:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Timer1_Init>
	Timer1_InputCaptureEdge(RISING);
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	0e 94 79 11 	call	0x22f2	; 0x22f2 <Timer1_InputCaptureEdge>

	Timer1_ICU_InterruptEnable();
    277a:	0e 94 ae 11 	call	0x235c	; 0x235c <Timer1_ICU_InterruptEnable>
	Timer1_ICU_SetCallBack(&App);
    277e:	86 e5       	ldi	r24, 0x56	; 86
    2780:	93 e1       	ldi	r25, 0x13	; 19
    2782:	0e 94 78 12 	call	0x24f0	; 0x24f0 <Timer1_ICU_SetCallBack>
	GIE_voidEnable();
    2786:	0e 94 ef 08 	call	0x11de	; 0x11de <GIE_voidEnable>




	HLCD_VoidGotoXY(0,0);
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	60 e0       	ldi	r22, 0x00	; 0
    278e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <HLCD_VoidGotoXY>
	HLCD_VoidSendString((u8*)"On Ticks=");
    2792:	80 e6       	ldi	r24, 0x60	; 96
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <HLCD_VoidSendString>
	HLCD_VoidSendNumber(OnTick);
    279a:	80 91 8f 00 	lds	r24, 0x008F
    279e:	88 2f       	mov	r24, r24
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <HLCD_VoidSendNumber>

	HLCD_VoidGotoXY(1,0);
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	60 e0       	ldi	r22, 0x00	; 0
    27aa:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <HLCD_VoidGotoXY>
	HLCD_VoidSendString((u8*)"Period Ticks=");
    27ae:	8a e6       	ldi	r24, 0x6A	; 106
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <HLCD_VoidSendString>
	HLCD_VoidSendNumber(PeriodTime);
    27b6:	80 91 90 00 	lds	r24, 0x0090
    27ba:	88 2f       	mov	r24, r24
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <HLCD_VoidSendNumber>
    27c2:	ff cf       	rjmp	.-2      	; 0x27c2 <main+0x98>

000027c4 <__udivmodhi4>:
    27c4:	aa 1b       	sub	r26, r26
    27c6:	bb 1b       	sub	r27, r27
    27c8:	51 e1       	ldi	r21, 0x11	; 17
    27ca:	07 c0       	rjmp	.+14     	; 0x27da <__udivmodhi4_ep>

000027cc <__udivmodhi4_loop>:
    27cc:	aa 1f       	adc	r26, r26
    27ce:	bb 1f       	adc	r27, r27
    27d0:	a6 17       	cp	r26, r22
    27d2:	b7 07       	cpc	r27, r23
    27d4:	10 f0       	brcs	.+4      	; 0x27da <__udivmodhi4_ep>
    27d6:	a6 1b       	sub	r26, r22
    27d8:	b7 0b       	sbc	r27, r23

000027da <__udivmodhi4_ep>:
    27da:	88 1f       	adc	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	5a 95       	dec	r21
    27e0:	a9 f7       	brne	.-22     	; 0x27cc <__udivmodhi4_loop>
    27e2:	80 95       	com	r24
    27e4:	90 95       	com	r25
    27e6:	bc 01       	movw	r22, r24
    27e8:	cd 01       	movw	r24, r26
    27ea:	08 95       	ret

000027ec <__prologue_saves__>:
    27ec:	2f 92       	push	r2
    27ee:	3f 92       	push	r3
    27f0:	4f 92       	push	r4
    27f2:	5f 92       	push	r5
    27f4:	6f 92       	push	r6
    27f6:	7f 92       	push	r7
    27f8:	8f 92       	push	r8
    27fa:	9f 92       	push	r9
    27fc:	af 92       	push	r10
    27fe:	bf 92       	push	r11
    2800:	cf 92       	push	r12
    2802:	df 92       	push	r13
    2804:	ef 92       	push	r14
    2806:	ff 92       	push	r15
    2808:	0f 93       	push	r16
    280a:	1f 93       	push	r17
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	ca 1b       	sub	r28, r26
    2816:	db 0b       	sbc	r29, r27
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	cd bf       	out	0x3d, r28	; 61
    2822:	09 94       	ijmp

00002824 <__epilogue_restores__>:
    2824:	2a 88       	ldd	r2, Y+18	; 0x12
    2826:	39 88       	ldd	r3, Y+17	; 0x11
    2828:	48 88       	ldd	r4, Y+16	; 0x10
    282a:	5f 84       	ldd	r5, Y+15	; 0x0f
    282c:	6e 84       	ldd	r6, Y+14	; 0x0e
    282e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2830:	8c 84       	ldd	r8, Y+12	; 0x0c
    2832:	9b 84       	ldd	r9, Y+11	; 0x0b
    2834:	aa 84       	ldd	r10, Y+10	; 0x0a
    2836:	b9 84       	ldd	r11, Y+9	; 0x09
    2838:	c8 84       	ldd	r12, Y+8	; 0x08
    283a:	df 80       	ldd	r13, Y+7	; 0x07
    283c:	ee 80       	ldd	r14, Y+6	; 0x06
    283e:	fd 80       	ldd	r15, Y+5	; 0x05
    2840:	0c 81       	ldd	r16, Y+4	; 0x04
    2842:	1b 81       	ldd	r17, Y+3	; 0x03
    2844:	aa 81       	ldd	r26, Y+2	; 0x02
    2846:	b9 81       	ldd	r27, Y+1	; 0x01
    2848:	ce 0f       	add	r28, r30
    284a:	d1 1d       	adc	r29, r1
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	cd bf       	out	0x3d, r28	; 61
    2856:	ed 01       	movw	r28, r26
    2858:	08 95       	ret

0000285a <_exit>:
    285a:	f8 94       	cli

0000285c <__stop_program>:
    285c:	ff cf       	rjmp	.-2      	; 0x285c <__stop_program>
